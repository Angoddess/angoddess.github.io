<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Angoddess Blog</title>
  <subtitle>Security | Network | Develop</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-04T07:42:08.543Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Angoddess</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>11.渗透测试平台DVWA之SQL盲注</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8BSQL%E7%9B%B2%E6%B3%A8/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之SQL盲注/</id>
    <published>2016-08-04T07:31:57.000Z</published>
    <updated>2016-08-04T07:42:08.543Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过DVWA平台的SQL Injection（Blind）模块简单介绍分析了SQL盲注的原理和运用。 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;SQL注入原理解析&quot;&gt;&lt;a href=&quot;#SQL注入原理解析&quot; class=&quot;headerlink&quot; title=&quot;SQL注入原理解析&quot;&gt;&lt;/a&gt;SQL注入原理解析&lt;/h2&gt;&lt;p&gt;　　SQL盲注跟DVWA的普通SQL注入在原理上，其实是一样的，不同的是，使用单引号已经不能作为测试注入是否存在的依据了，因为不会有sql语句报错提示，一切都是静默的，输入单引号，没有任何输出和反馈，显然是对错误信息做了处理了。&lt;br&gt;&lt;img src=&quot;/uploads/11/11-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码分析与运用&quot;&gt;&lt;a href=&quot;#源码分析与运用&quot; class=&quot;headerlink&quot; title=&quot;源码分析与运用&quot;&gt;&lt;/a&gt;源码分析与运用&lt;/h2&gt;&lt;p&gt;　　我们直接看源码会发现，无论Low，Medium还是High级别，源码跟DVWA的普通注入模块其实是基本一样的，唯一不同的只是在mysql_numrows函数前面加了@符号，做了预处理。&lt;br&gt;　　所以其实我们依然可以使用在DVWA的普通注入模块中的方法获取数据库数据，每个级别跟DVWA的普通注入模块获取数据方法是一样的，只是因为没有报错了，我们就要根据其它反馈信息来判断，当前的注入语句是否执行成功或有效了。&lt;br&gt;　　就如我们在进行order by判断字段数时，原先普通注入order by 3时会爆出数据库字段错误，而现在却不会，页面单纯显示空白，就像查询内容空白一样。&lt;br&gt;&lt;img src=&quot;/uploads/11/11-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　而order by 2就有了用户信息显示&lt;br&gt;&lt;img src=&quot;/uploads/11/11-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　这一样能够判断字段数为2。此时我们判断不再依据错误提示，而是页面返回内容来判断，其实跟报错判断大同小异。&lt;br&gt;　　盲注中比较不同和难分辨的就是基于时间的注入了，页面没有任何异常和不同，需要通过页面反馈的时间差异来判断SQL语句的执行情况。&lt;br&gt;　　做一个简单的测试，我们构造如下图这样的语句&lt;br&gt;&lt;img src=&quot;/uploads/11/11-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到返回数据包用了10秒左右，跟我们设定的值是基本一致的，再试试1秒看看&lt;br&gt;&lt;img src=&quot;/uploads/11/11-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从而我们可以判断，该处是可以基于时间进行盲注的。在不同数据库中，我们还会利用不同的跟时间有关的函数来判断和猜测获取数据。不过基于时间的盲注有个弊端就是，耗时比较长，而且需要稳定的网络环境，如何网络不稳定，很容易影响判断，导致失误。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过DVWA平台的SQL Injection（Blind）模块简单介绍分析了SQL盲注的原理和运用。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>10.渗透测试平台DVWA之SQL注入</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8BSQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之SQL注入/</id>
    <published>2016-08-04T01:49:42.000Z</published>
    <updated>2016-08-04T04:24:53.268Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过DVWA平台的SQL Injection模块进行SQL注入漏洞的一般演示和原理解析。 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;SQL注入原理解析&quot;&gt;&lt;a href=&quot;#SQL注入原理解析&quot; class=&quot;headerlink&quot; title=&quot;SQL注入原理解析&quot;&gt;&lt;/a&gt;SQL注入原理解析&lt;/h2&gt;&lt;p&gt;　　SQL注入，在渗透测试当中是重点关注点之一，一般都具有较高的危害，甚至可以直接获取服务器webshell。&lt;br&gt;　　SQL注入根据数据库的类型不同，注入语句会有所变化。 SQL注入原理就是通过修改正常的用户输入或数据包传递参数值，构造的特殊语句，从而改变原来的数据库语句执行，达到访问获取数据库敏感数据或执行任意数据库命令的目的。&lt;br&gt;　　SQL注入根据注入类型不同，可以分为字符型注入，数字型注入，基于时间的注入等。&lt;br&gt;　　我们先来看看DVWA平台中low级别的SQL注入式如何的。&lt;/p&gt;
&lt;h2 id=&quot;（一）Low级别SQL注入&quot;&gt;&lt;a href=&quot;#（一）Low级别SQL注入&quot; class=&quot;headerlink&quot; title=&quot;（一）Low级别SQL注入&quot;&gt;&lt;/a&gt;（一）Low级别SQL注入&lt;/h2&gt;&lt;p&gt;　　我们先看看这个级别的源码&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;Submit&#39;&lt;/span&gt;]))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Retrieve data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $getid = &lt;span class=&quot;string&quot;&gt;&quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $result = mysql_query($getid) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt; . mysql_error() . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $num = mysql_numrows($result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ($i &amp;lt; $num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $first = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;first_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $last = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ID: &#39;&lt;/span&gt; . $id . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;First name: &#39;&lt;/span&gt; . $first . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;Surname: &#39;&lt;/span&gt; . $last;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，从url中接收id值，没有做任何检测过滤，直接代入sql语句当中去使用，那么我们就完全可以构造特殊的id值了。&lt;br&gt;　　回到DVWA中，我们先用单引号做下测试，爆出了sql错误&lt;br&gt;&lt;img src=&quot;/uploads/10/10-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　接下来进一步验证注入的存在&lt;br&gt;&lt;img src=&quot;/uploads/10/10-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/10/10-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　以第一个为例，输入的id值传入sql语句中，是原sql语句变成了&lt;br&gt;　　SELECT first_name, last_name FROM users WHERE user_id = ‘1’ and 1=1 – ‘&lt;br&gt;　　可以看到，–后面的语句被注释掉了，而—前面的依然是一个完整的sql查询语句，没有错误，但却执行了我们想要执行的sql命令and 1=1，这就是sql注入的基本原理和目的。&lt;br&gt;　　接下来就可以尝试用union来构造联合查询从而获取数据库数据了，在此之前要判断字段数，用order by语句。&lt;br&gt;&lt;img src=&quot;/uploads/10/10-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/10/10-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　确定了字段数是2，这下就可以union查询了&lt;br&gt;&lt;img src=&quot;/uploads/10/10-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从图中可以看到，字段内容显示位置，至此我们只需要替换1，2的内容就可以查询我们想要查询的东西了，如图查询了数据库用户和当前数据库名：&lt;br&gt;&lt;img src=&quot;/uploads/10/10-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　下面爆出用户名和密码：&lt;br&gt;&lt;img src=&quot;/uploads/10/10-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　至此就不继续深入了，接着我们看看第二个级别的SQL注入。&lt;/p&gt;
&lt;h2 id=&quot;（二）Medium级别SQL注入&quot;&gt;&lt;a href=&quot;#（二）Medium级别SQL注入&quot; class=&quot;headerlink&quot; title=&quot;（二）Medium级别SQL注入&quot;&gt;&lt;/a&gt;（二）Medium级别SQL注入&lt;/h2&gt;&lt;p&gt;　　一样我们先看看源码。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;Submit&#39;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Retrieve data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = mysql_real_escape_string($id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $getid = &lt;span class=&quot;string&quot;&gt;&quot;SELECT first_name, last_name FROM users WHERE user_id = $id&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $result = mysql_query($getid) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt; . mysql_error() . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $num = mysql_numrows($result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ($i &amp;lt; $num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $first = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;first_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $last = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ID: &#39;&lt;/span&gt; . $id . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;First name: &#39;&lt;/span&gt; . $first . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;Surname: &#39;&lt;/span&gt; . $last;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　Medium中的源码跟Low中的源码有两个比较重要的区别，一个是使用了mysql_real_escape_string()函数来转义参数id中的特殊字符，如单引号，这是用来防止SQL注入的一种手段。第二个区别是SQL查询语句中，参数id是被作为数字进行传递进去的，而Low级别中是作为字符传递进SQL语句的。&lt;br&gt;　　为什么说第二个区别也重要呢？因为id是数字的话，我们完全可以不用单引号了，也就跟第一个区别里使用了特殊字符转义的函数一点影响都没有，我们照样构造特殊语句。&lt;br&gt;　　这里直接查询他的用户表来证明：&lt;br&gt;&lt;img src=&quot;/uploads/10/10-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　输入的特殊值传递到源码中，经过转义（实际并没有影响，因为没有使用单双引号等特殊字符），构成的SQL语句为：&lt;br&gt;　　SELECT first_name, last_name FROM users WHERE user_id = 1 and 1=2 union select user,password from users&lt;br&gt;　　从语句中就可以看到，我们查询id=1且1=2是永远不成立的，从而执行第二条select语句查询了users表中的user和password字段。&lt;br&gt;　　从这里我们可以看出，php中虽然有防止SQL注入的函数存在，但并不一定就能完全杜绝SQL注入，还要结合程序猿的开发习惯，sql语句的结构，而且最好多个函数和方法配合使用。&lt;/p&gt;
&lt;h2 id=&quot;（三）High级别SQL注入&quot;&gt;&lt;a href=&quot;#（三）High级别SQL注入&quot; class=&quot;headerlink&quot; title=&quot;（三）High级别SQL注入&quot;&gt;&lt;/a&gt;（三）High级别SQL注入&lt;/h2&gt;&lt;p&gt;　　最后我们来看看High级别的源码是如何改善并更好的防止SQL注入的。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;Submit&#39;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Retrieve data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = stripslashes($id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = mysql_real_escape_string($id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (is_numeric($id))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $getid = &lt;span class=&quot;string&quot;&gt;&quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $result = mysql_query($getid) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt; . mysql_error() . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $num = mysql_numrows($result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ($i &amp;lt; $num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $first = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;first_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $last = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ID: &#39;&lt;/span&gt; . $id . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;First name: &#39;&lt;/span&gt; . $first . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;Surname: &#39;&lt;/span&gt; . $last;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　该级别中，不仅使用mysql_real_escape_string函数转义特殊字符，而且在接下来还做了判断，限制了id的值只能是数字，从而防止SQL注入。从这里，我们基本上就很难再去构造特殊语句进行恶意注入查询数据数据库敏感信息了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过DVWA平台的SQL Injection模块进行SQL注入漏洞的一般演示和原理解析。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>9.渗透测试平台DVWA之文件包含</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之文件包含/</id>
    <published>2016-06-10T11:27:32.000Z</published>
    <updated>2016-06-10T11:46:48.871Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过利用DVWA平台，简单分析了PHP站点中，远程文件包含漏洞和本地文件包含漏洞的原理和利用和防范！&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件包含漏洞原理简析&quot;&gt;&lt;a href=&quot;#文件包含漏洞原理简析&quot; class=&quot;headerlink&quot; title=&quot;文件包含漏洞原理简析&quot;&gt;&lt;/a&gt;文件包含漏洞原理简析&lt;/h2&gt;&lt;p&gt;　　文件包含漏洞，是PHP独有的漏洞，是PHP通过函数引入文件时，没有对引入文件名做合法检验，即没有过滤引入文件时，传入参数是否合法或包含敏感字符，文件等，导致可以读取系统敏感文件信息，如系统密码文件等，甚至直接代码注入，如直接注入一句话木马等，一般风险较高。&lt;br&gt;　　文件包含分为本地文件包含和远程文件包含，本地文件包含指被包含文件存在本地服务器当中，直接使用本地物理路径即可，远程文件包含指被包含文件在另外的服务器上，需要利用url地址来包含，远程文件包含需要开启php配置文件中的allow_url_include，否则无法使用url包含文件，默认php不开启。&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台中Low级别案例&quot;&gt;&lt;a href=&quot;#DVWA平台中Low级别案例&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台中Low级别案例&quot;&gt;&lt;/a&gt;DVWA平台中Low级别案例&lt;/h2&gt;&lt;p&gt;　　Low级别的文件包含漏洞非常简单，我们来看看界面&lt;br&gt;&lt;img src=&quot;/uploads/9/9-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从链接当中可以看到，参数page传入一个值，而这个值是一个文件，那么我们就大概可以猜到，这里引用了外部文件，可能存在风险。&lt;br&gt;　　我们来测试一下，假设我们知道服务器是linux系统（实际渗透中可以通过其他技术获取服务器信息），那么我们改变page参数传入的值。&lt;br&gt;&lt;img src=&quot;/uploads/9/9-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看我，我们改变了传入的值为/etc/passwd，这是linux系统的用户信息文件，直接暴露出来了，这就证明存在文件包含漏洞，我们可以通过该漏洞，任意读取系统文件，查看敏感信息。&lt;br&gt;上面说的是本地文件包含，在Low中还可以做到远程文件包含，不过前提是开启了php中的allow_url_fopen和allow_url_include，在php.ini文件中配置。&lt;br&gt;&lt;img src=&quot;/uploads/9/9-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　我们来看看文件包含效果:&lt;br&gt;&lt;img src=&quot;/uploads/9/9-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　下面是在本地服务器上直接访问phpinfo得到的信息&lt;br&gt;&lt;img src=&quot;/uploads/9/9-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到，我们获取到的的确是本地服务器的信息。甚至我们可以直接包含木马文件来控制服务器，这里不做演示了。&lt;br&gt;　　最后来看看源码：&lt;br&gt;&lt;img src=&quot;/uploads/9/9-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　源码很简单，直接用GET方法接收传递进来的值，没有做任何处理，这也就导致了攻击者可以随意更改传入参数值来达到文件包含攻击的目的。我们应假设用户的输入并非都是安全的，然后去过滤不安全的值来达到我们的正常访问。&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台中Medium级别案例&quot;&gt;&lt;a href=&quot;#DVWA平台中Medium级别案例&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台中Medium级别案例&quot;&gt;&lt;/a&gt;DVWA平台中Medium级别案例&lt;/h2&gt;&lt;p&gt;　　Medium级别中，对于文件包含漏洞就做了一定的防范手段，我们来看看源码。&lt;br&gt;&lt;img src=&quot;/uploads/9/9-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从源码中可以看到，其过滤了&lt;a href=&quot;http://和https://，将其替换为空字符，这也就是说，在一定程度上防范了远程文件包含，然而其并没有对本地文件包含做过滤，也就是说，其仍然存在本地文件包含漏洞。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://和https://，将其替换为空字符，这也就是说，在一定程度上防范了远程文件包含，然而其并没有对本地文件包含做过滤，也就是说，其仍然存在本地文件包含漏洞。&lt;/a&gt;&lt;br&gt;　　首先先来试试远程文件包含&lt;br&gt;&lt;img src=&quot;/uploads/9/9-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　没有任何信息，包含失败了，再看看本地的，成功包含&lt;br&gt;&lt;img src=&quot;/uploads/9/9-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台中High级别案例&quot;&gt;&lt;a href=&quot;#DVWA平台中High级别案例&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台中High级别案例&quot;&gt;&lt;/a&gt;DVWA平台中High级别案例&lt;/h2&gt;&lt;p&gt;　　现在我们来看看High级别的源码&lt;br&gt;&lt;img src=&quot;/uploads/9/9-10.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　很明显，这个级别利用了白名单的方式，只允许传入文件include.php，否则一律输出错误！&lt;br&gt;　　这是一种比较好的防御方法，无论远程和本地文件包含，利用白名单的形式，都较好的防御了文件包含漏洞攻击。&lt;br&gt;　　本地文件包含尝试结果&lt;br&gt;&lt;img src=&quot;/uploads/9/9-11.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　远程文件包含尝试结果&lt;br&gt;&lt;img src=&quot;/uploads/9/9-12.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过利用DVWA平台，简单分析了PHP站点中，远程文件包含漏洞和本地文件包含漏洞的原理和利用和防范！
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>8.渗透测试平台DVWA之CSRF</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8BCSRF/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之CSRF/</id>
    <published>2016-06-09T11:25:00.000Z</published>
    <updated>2016-06-10T11:44:50.207Z</updated>
    
    <content type="html">&lt;p&gt;　　本文简单介绍了CSRF的形成原理，以及以DVWA平台为例，做了简单的利用分析！&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSRF原理简单分析&quot;&gt;&lt;a href=&quot;#CSRF原理简单分析&quot; class=&quot;headerlink&quot; title=&quot;CSRF原理简单分析&quot;&gt;&lt;/a&gt;CSRF原理简单分析&lt;/h2&gt;&lt;p&gt;　　CSRF，跨站请求伪造，其主要是通过盗用被攻击者的身份来进行非法操作，如修改你的密码，窃取个人敏感信息，银行转账等。&lt;br&gt;　　具体原理为，当我们登录我们某一网站的账号，如银行网站，登录后我们与浏览器之间便存在了一个可信任的会话连接，而该网站存在CSRF漏洞，那么，此时，如果我们又访问了一个加入了恶意代码的另一个网站，该恶意代码是执行该银行网站的某些敏感操作的，如转账，修改密码等。正常情况下，我们直接访问改网站，没有任何问题，因为这些恶意代码的操作需要用户权限支撑，否则执行失败，然而当我们登录了银行，而会话没有结束时，访问了该网站，那么则执行了这些恶意代码操作，而且是静默的，一般用户并不知情，也就是说，在不知不觉中，用户密码被修改，银行存款被转走等。&lt;br&gt;　　接下来，我们来看看DVWA中对于CSRF的实操。&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台low级别CSRF分析&quot;&gt;&lt;a href=&quot;#DVWA平台low级别CSRF分析&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台low级别CSRF分析&quot;&gt;&lt;/a&gt;DVWA平台low级别CSRF分析&lt;/h2&gt;&lt;p&gt;　　low级别的CSRF模块中，密码修改并没有验证旧密码，直接就可以输入新密码即可。&lt;br&gt;&lt;img src=&quot;/uploads/8/8-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　首先我们先来查看dvwa中的admin的密码hash，以方便我们待会做对比。&lt;br&gt;&lt;img src=&quot;/uploads/8/8-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　然后我们随意输入一个密码，确认密码框里随便输入，不要跟新密码一样，我们现在要获取密码修改的连接或数据包，先不改动密码。&lt;br&gt;&lt;img src=&quot;/uploads/8/8-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从图中可以看到，通过链接请求密码修改的，我们可以尝试在另一个浏览器里面直接访问该链接，发现其跳转到登录去了，因为没有可信任会话，接下来我们构造一个图片网站，嵌入该恶意链接。&lt;br&gt;&lt;img src=&quot;/uploads/8/8-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　访问该网站，就是一个正常的图片&lt;br&gt;&lt;img src=&quot;/uploads/8/8-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　接下来我们用已登录了DVWA的浏览器来访问该网站，依然正常，没有任何异常显示。&lt;br&gt;&lt;img src=&quot;/uploads/8/8-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　然而此时，密码已经修改成功，我们到数据库查看密码hash&lt;br&gt;&lt;img src=&quot;/uploads/8/8-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到密码hash已经变了，密码变成123456，CSRF攻击成功！&lt;br&gt;　　我们来分析下DVWA中CSRF的low级别源码&lt;br&gt;&lt;img src=&quot;/uploads/8/8-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以发现，只是做了新密码的两次输入验证，而并没有对来源进行验证，这也就导致了CSRF的跨站请求伪造。&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台medium级别CSRF分析&quot;&gt;&lt;a href=&quot;#DVWA平台medium级别CSRF分析&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台medium级别CSRF分析&quot;&gt;&lt;/a&gt;DVWA平台medium级别CSRF分析&lt;/h2&gt;&lt;p&gt;　　medium级别的CSRF，我们先来看看源码&lt;br&gt;&lt;img src=&quot;/uploads/8/8-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　其先判断了请求是否来自于本地，而不是其他站点，那么像low级别那样构造恶意链接便行不通了，但是是否酱紫就安全了呢？&lt;br&gt;从源码中可以看到，其实通过referer来判断请求来源的，也就是客户端浏览器的referer值，然而我们可以通过设置篡改referer值来欺负服务器，我们的请求来源是本地的，从而达到CSRF跨站请求的目的。&lt;br&gt;　　可以在正常网站中，内嵌构造伪造referer值，如php当中，可以嵌入如下代码：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ch = curl_init(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  curl_setopt($ch,CURLOPT_URL,&lt;span class=&quot;string&quot;&gt;&quot;http://114.215.127.138/baji/DVWA-1.0.8/vulnerabilities/csrf/?password_new=12345&amp;amp;password_conf=12345&amp;amp;Change=Change#&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  curl_setopt($ch, CURLOPT_REFERER, &lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  curl_exec($ch); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  curl_close($ch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　这里就不做具体演示了。&lt;br&gt;　　DVWA中这个级别的本身就存在一些问题（不知道是不是我的版本问题），所以不要纠结于为什么不成功，可以自己修改下原代码修复之后再测试。&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台high级别CSRF分析&quot;&gt;&lt;a href=&quot;#DVWA平台high级别CSRF分析&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台high级别CSRF分析&quot;&gt;&lt;/a&gt;DVWA平台high级别CSRF分析&lt;/h2&gt;&lt;p&gt;　　最后看看high级别的，high级别对于CSRF就有了较好的防御，来看源码：&lt;br&gt;&lt;img src=&quot;/uploads/8/8-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从源码中可以看到，修改密码是需要旧密码做验证的，这样的话，不知道密码的情况下，我们是没办法做到跨站请求伪造攻击的，除非辅助以其他的漏洞攻击，这里不做额外衍生了。&lt;br&gt;　　旧密码验证是一种防御方式，也可以添加验证码等其他方式进行二次验证，这样则能尽量防御CSRF攻击。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文简单介绍了CSRF的形成原理，以及以DVWA平台为例，做了简单的利用分析！
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>7.渗透测试平台DVWA之命令执行</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之命令执行/</id>
    <published>2016-04-20T10:09:16.000Z</published>
    <updated>2016-06-09T13:05:44.265Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过DVWA的Command Execution模块进行命令执行漏洞的一般演示，DVWA中共存在三个级别的命令执行漏洞。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;　　DVWA中命令执行测试分三个级别，low，medium和high，下面依次来分析。&lt;/p&gt;
&lt;h2 id=&quot;low级别命令执行测试&quot;&gt;&lt;a href=&quot;#low级别命令执行测试&quot; class=&quot;headerlink&quot; title=&quot;low级别命令执行测试&quot;&gt;&lt;/a&gt;low级别命令执行测试&lt;/h2&gt;&lt;p&gt;　　首先，把DVWA的安全级别调至low，如图所示：&lt;br&gt;&lt;img src=&quot;/uploads/7/7-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　此时，底部左侧会显示级别，如图所示：&lt;br&gt;&lt;img src=&quot;/uploads/7/7-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　接下来回到命令执行模块，根据提示输入IP地址，提交后返回了ping信息，如图所示：&lt;br&gt;&lt;img src=&quot;/uploads/7/7-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　以此可以判断这是一个ping程序，输入IP则进行ping操作。总所周知，ping命令是系统命令，即此处调用了系统命令，那么是否可以构造特殊命令执行语句执行其他命令呢？&lt;br&gt;　　我们知道，在window的DOS命令执行中可以用“&amp;amp;&amp;amp;”来连接两个命令一起执行，而linux中则可以利用“;”来连接两个命令共同执行，我们这里可以测试一下。由于测试服务器是linux系统，所以我们直接用“;”来测试。&lt;br&gt;　　输入“; cat /etc/passwd”，看是否能读取到passwd文件中的信息并打印出来。&lt;br&gt;&lt;img src=&quot;/uploads/7/7-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从图中，可以很明显的看到，“;”后面的命令执行成功了，打印出了passwd文件的信息。&lt;br&gt;　　那么，可以判断其存在命令执行漏洞。通过此漏洞可以直接执行系统命令，如果权限够大，甚至可以直接执行添加系统管理员，开启敏感端口等。&lt;br&gt;　　现在我们来瞧瞧它的源码，看看这个漏洞是如何产生的。选择View Source查看相关源码，如图所示：&lt;br&gt;&lt;img src=&quot;/uploads/7/7-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;( $_POST[ &lt;span class=&quot;string&quot;&gt;&#39;submit&#39;&lt;/span&gt; ] ) ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = $_REQUEST[ &lt;span class=&quot;string&quot;&gt;&#39;ip&#39;&lt;/span&gt; ]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Determine OS and execute the ping command. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (stristr(php_uname(&lt;span class=&quot;string&quot;&gt;&#39;s&#39;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&#39;Windows NT&#39;&lt;/span&gt;)) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  &#39;&lt;/span&gt; . $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  -c 3 &#39;&lt;/span&gt; . $target );        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　从代码中可以看到，用户输入的数据直接被赋值到$target变量，且在第二个if语句中被直接利用，而没有做任何的处理，所以导致了任意命令执行漏洞。&lt;/p&gt;
&lt;h2 id=&quot;medium级别命令执行测试&quot;&gt;&lt;a href=&quot;#medium级别命令执行测试&quot; class=&quot;headerlink&quot; title=&quot;medium级别命令执行测试&quot;&gt;&lt;/a&gt;medium级别命令执行测试&lt;/h2&gt;&lt;p&gt;　　将DVWA security级别调到medium进行中等安全的命令执行测试。&lt;br&gt;　　当DVWA处于这个级别时，我们会发现，之前的命令执行方法已经不适用了，即使用“;”或“&amp;amp;&amp;amp;”来连接命令已经无法达到目的，可以猜测，其做了安全措施，如转义了敏感字符等。&lt;br&gt;　　我们直接来分析下这个级别的命令执行模块代码。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;( $_POST[ &lt;span class=&quot;string&quot;&gt;&#39;submit&#39;&lt;/span&gt;] ) ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = $_REQUEST[ &lt;span class=&quot;string&quot;&gt;&#39;ip&#39;&lt;/span&gt; ]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Remove any of the charactars in the array (blacklist). &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $substitutions = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;( &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;&amp;amp;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Determine OS and execute the ping command. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (stristr(php_uname(&lt;span class=&quot;string&quot;&gt;&#39;s&#39;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&#39;Windows NT&#39;&lt;/span&gt;)) &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  &#39;&lt;/span&gt; . $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  -c 3 &#39;&lt;/span&gt; . $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　从代码不难看出，其对“&amp;amp;&amp;amp;”和“;”字符，利用str_replace方法做了转义，变成空字符了。所以我们没法用这两种方法来连接额外的命令，从而达到任意命令执行了。&lt;br&gt;　　然而，细心的你会想到，这里其用的是黑名单的方式，而且单单只是过滤了“&amp;amp;&amp;amp;”和“;”字符，那么是否有其他字符也能做到同样的效果呢？&lt;br&gt;　　这样想，过滤掉的两种连接字符是达到如and般效果，那么是否也有类似or的效果的方法呢？&lt;br&gt;　　答案是肯定的，无论在window还是linux系统中，我们都可以通过“||”来达到类似or一样的效果，不同的是，这其实并不完全是or，其实际效果是当“||”前的命令执行失败时，执行“||”后的命令。也就是说，如果“||”前的命令执行成功了，那么就不会执行后面的命令了。所以我们在构造特殊命令时要注意，不能在“||”前构造能够成功执行的命令语句。&lt;br&gt;　　结合DVWA的命令执行模块测试程序，这里是ping程序，需要用户输入IP，那么其实，我们只要不输入IP直接输入“||”并带上我们希望执行的语句就可以了，因为酱紫就导致了“||”前的ping语句没有目标而执行失败，从而会执行后面的语句，我们测试一下，输入“|| cat /etc/passwd”，结果如图：&lt;br&gt;&lt;img src=&quot;/uploads/7/7-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　成功执行了。所以说，黑名单的过滤方法真心不怎么安全，总能被人想到方法绕过。&lt;/p&gt;
&lt;h2 id=&quot;high级别命令执行测试&quot;&gt;&lt;a href=&quot;#high级别命令执行测试&quot; class=&quot;headerlink&quot; title=&quot;high级别命令执行测试&quot;&gt;&lt;/a&gt;high级别命令执行测试&lt;/h2&gt;&lt;p&gt;　　最后介绍high级别的命令执行模块，先把DVWA security级别调到high。这个级别你会发现之前两个级别的所有方法都失效了，而且你如论如何也突破不了达到任意命令执行的效果，我们直接来分析源码。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;( $_POST[ &lt;span class=&quot;string&quot;&gt;&#39;submit&#39;&lt;/span&gt; ] ) ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = $_REQUEST[&lt;span class=&quot;string&quot;&gt;&quot;ip&quot;&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = stripslashes( $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Split the IP into 4 octects &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $octet = explode(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, $target); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Check IF each octet is an integer &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((is_numeric($octet[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])) &amp;amp;&amp;amp; (is_numeric($octet[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])) &amp;amp;&amp;amp; (is_numeric($octet[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])) &amp;amp;&amp;amp; (is_numeric($octet[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])) &amp;amp;&amp;amp; (sizeof($octet) == &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)  ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// If all 4 octets are int&#39;s put the IP back together. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = $octet[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;.$octet[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;.$octet[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;.$octet[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Determine OS and execute the ping command. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (stristr(php_uname(&lt;span class=&quot;string&quot;&gt;&#39;s&#39;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&#39;Windows NT&#39;&lt;/span&gt;)) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  &#39;&lt;/span&gt; . $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  -c 3 &#39;&lt;/span&gt; . $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;ERROR: You have entered an invalid IP&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　从代码中可以看到，$target接收来这用户输入的数据，然后利用explode以“.”为边界进行分割，成为一个数组赋值给$octet，接下来利用if语句判断数组中的数据是否都为数字，并且限制了数组的长度只能是4，也就是说，基本限制了用户输入的数据就只能是IP地址。&lt;br&gt;这样才会执行if里面的语句去执行使用用户输入的命令，而这样的限制已经非常苛刻了，至少目前我还没发现啥子方法可以绕过去的，在这里GG了，求路过的大神支招。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过DVWA的Command Execution模块进行命令执行漏洞的一般演示，DVWA中共存在三个级别的命令执行漏洞。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>6.渗透测试平台DVWA之暴力破解</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之暴力破解/</id>
    <published>2016-04-20T09:55:43.000Z</published>
    <updated>2016-04-20T10:02:28.189Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过DVWA的Brute Force模块进行暴力破解漏洞的一般演示，其中还使用了burpsuite工具。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;　　选择Brute Force进行暴力破解测试&lt;br&gt;&lt;img src=&quot;/uploads/6/6-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　首先开启burpsuite，把浏览器代理到burpsuite进行截包。&lt;br&gt;&lt;img src=&quot;/uploads/6/6-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　随便输入一个用户名密码，然后查看burpsuite中数据包截取情况，可以看到已经截取到登录的请求包，账户密码是明文传输且使用get方法，我们需要把数据包发送到intruder模块进行爆破。&lt;br&gt;&lt;img src=&quot;/uploads/6/6-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　进入intruder模块，把用户名改为admin，密码作为破解对象进行暴力破解&lt;br&gt; &lt;img src=&quot;/uploads/6/6-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　为了方便测试，这里直接手动输入几个密码作为字典，包含正确密码。&lt;br&gt; &lt;img src=&quot;/uploads/6/6-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　然后开始破解，很快我们就可以看到破解出密码为password（根据反馈数据包长度以及内容进行判断）&lt;br&gt; &lt;img src=&quot;/uploads/6/6-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　当然，我们也可以把用户名也作为破解对象，那么此时，破解的难度就会加大，耗时也会成倍增长，同时破解对象越多，耗时越长，难度越大。&lt;br&gt;　　暴力破解虽然没什么技术含量，且大多数时候比较耗时，然而，越是如此，越容易被忽略，在渗透测试当中常也能有意外收获。站点后台暴力破解的难度一般较大，且斩获较少，而对于用户系统来说，大量的用户总有那么些懒惰的人存在，喜欢简单易记的用户名密码，而这些都是暴力破解的突破口，当然，实际操作中还要结合其他资源。&lt;br&gt;　　暴力破解其实最主要的就是字典，一个好的字典，能让你节省大量时间，快速破解用户名密码。而一本好的字典不是随便网上搜出来的，而是经验的积累。最好就是有一本不是太大的常见用户名和密码字典，可以进行初步的测试，然后结合搜集到的站点的各种信息，制作一本针对性更强的字典来使用，这样既可以节省时间，又可以更加准确的破解账户密码。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过DVWA的Brute Force模块进行暴力破解漏洞的一般演示，其中还使用了burpsuite工具。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>5.渗透测试平台DVWA之简单介绍</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之简单介绍/</id>
    <published>2016-04-18T03:39:28.000Z</published>
    <updated>2016-06-10T11:42:41.265Z</updated>
    
    <content type="html">&lt;p&gt;　　本文简单介绍了渗透测试平台DVWA的下载安装，以及平台上的基本功能。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;下载安装DVWA&quot;&gt;&lt;a href=&quot;#下载安装DVWA&quot; class=&quot;headerlink&quot; title=&quot;下载安装DVWA&quot;&gt;&lt;/a&gt;下载安装DVWA&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.dvwa.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DVWA下载入口&lt;/a&gt;&lt;br&gt;　　DVWA是使用PHP语言写的测试平台，以及使用的MySql数据库，所以要先搭好PHP+MYSQL的环境。&lt;br&gt;　　下载完成后，把文件直接解压到你的站点根目录就可以了！&lt;br&gt;　　接下来就要修改配置文件，即config文件夹中的config.ini.php&lt;br&gt;　　根据你的数据库实际情况进行数据库地址，用户名和密码修改。&lt;br&gt;　　最后访问&lt;a href=&quot;http://你的DVWA地址/setup.php安装即可。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://你的DVWA地址/setup.php安装即可。&lt;/a&gt;&lt;br&gt;　　安装完成后，DVWA有五个默认用户，分别为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;admin/password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gordonb/abc123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1337/charley&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pablo/letmein&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;smithy/password&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　登录进入系统后，界面如图：&lt;br&gt;&lt;img src=&quot;/uploads/5/5-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;DVWA功能模块说明&quot;&gt;&lt;a href=&quot;#DVWA功能模块说明&quot; class=&quot;headerlink&quot; title=&quot;DVWA功能模块说明&quot;&gt;&lt;/a&gt;DVWA功能模块说明&lt;/h2&gt;&lt;p&gt;（一）setup&lt;br&gt;　　该模块中可以对数据库进行安装和重置&lt;br&gt;&lt;img src=&quot;/uploads/5/5-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;（二）十大测试功能模块&lt;br&gt;　　DVWA共有十大测试模块，即Brute Force模块开始到XSS stored模块。依次为暴力破解，命令执行，跨站请求伪造，不安全的验证码，文件包含，SQL注入，SQL盲注，文件上传，反射型XSS，存储型XSS。&lt;br&gt;　　需要注意的是不安全的验证码模块需要额外的配置。（这里不做介绍，要翻墙）&lt;br&gt;&lt;img src=&quot;/uploads/5/5-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;（三）DVWA安全level&lt;br&gt;　　DVWA拥有三个安全level，分别为low，medium和high。&lt;br&gt;　　不同level的DVWA，其安全性不一样，在一些功能模块中的测试难度也会不一样，如命令执行，SQL注入等。&lt;br&gt;　　能够让大家由简入深的学习各项漏洞利用技巧，体验不同难度的渗透技术。&lt;br&gt;　　在网页左下角可以看到登录用户名，level等级以及是否开启了PHPIDS。&lt;br&gt;&lt;img src=&quot;/uploads/5/5-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文简单介绍了渗透测试平台DVWA的下载安装，以及平台上的基本功能。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>4.中国菜刀爆菊记之我的检测之旅</title>
    <link href="http://yoursite.com/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E7%88%86%E8%8F%8A%E8%AE%B0%E4%B9%8B%E6%88%91%E7%9A%84%E6%A3%80%E6%B5%8B%E4%B9%8B%E6%97%85/"/>
    <id>http://yoursite.com/中国菜刀爆菊记之我的检测之旅/</id>
    <published>2016-04-02T14:30:20.000Z</published>
    <updated>2016-04-20T09:53:56.692Z</updated>
    
    <content type="html">&lt;p&gt;　　前几天爆起的菜刀后门事件可谓在安全界里面掀起龙卷风，三百万Webshell就这么成了别人的嫁衣，吾心甚恐。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://drops.wooyun.org/news/13471&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;事件传送门&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/uploads/4/4-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　事件之后，白帽子们纷纷紧张的测试自己的菜刀有没有后门，多年的心血是否被窃取。&lt;br&gt;　　其实，在此之前，就曾经爆出过菜刀存在后门的情况了，只是当时并没有爆出如此巨大的Webshell被爆菊，也并没有引起这么大的震动，如今，亮闪闪的数字以及清晰的分析告诉你，菜刀后门是如此的可恶，竟然窃取了那么多白帽子们的辛苦成果，实在是可恶至极。&lt;br&gt;　　作为小白，虽然没有手握大量Webshell，但总也有那么些再手上呀，我也不得不担心自己的成果被人爆菊了，这可不能忍，于是乎开启了我的检测之旅。&lt;br&gt;　　我采取抓包检测，使用的抓包工具是fiddler。&lt;br&gt;　　首先需要一个测试站点，我在虚拟机里搭了个2003的服务器，放了个一句话木马，用来给我的菜刀连接。&lt;br&gt;　　打开fiddler开始抓包，因为还没有访问，所以没有任何数据包&lt;br&gt;&lt;img src=&quot;/uploads/4/4-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　打开菜刀，看看fiddler有没反应，嗯，依然正常没有数据包（为什么打开菜刀要查看有没数据包，因为有道友说有的菜刀在打开的时候就会发送莫名其妙的数据包，所以我要谨慎）&lt;br&gt;　　接着用菜刀连接我们的服务器上的一句话&lt;br&gt;&lt;img src=&quot;/uploads/4/4-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到，有两个数据包，我们分别来检测下看传输了些什么数据，有没有问题。&lt;br&gt;　　首先第一个数据包&lt;br&gt;&lt;img src=&quot;/uploads/4/4-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从内容中可以看到一部分做了UTF-8编码，一部分是16进制码，那么我们就解码看看。&lt;br&gt;&lt;img src=&quot;/uploads/4/4-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　UTF-8部分解码后，看起来没有问题，是熟悉的菜刀代码&lt;br&gt;&lt;img src=&quot;/uploads/4/4-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　16进制部分也没有问题&lt;br&gt;　　我们再看回数据包的Header头&lt;br&gt;&lt;img src=&quot;/uploads/4/4-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　也并没有奇怪的数据提交申请和IP，那么第一个数据包就检测完成了，初步结果没有问题，第二个数据包检测与第一个一样，接不上步骤了。&lt;br&gt;　　至于第二个数据包为什么比较大，是因为16进制部分的内容不同，第一个数据包是请求与目标连接，第二个是请求文件管理，所以第二个数据包要比较大，下面是第二个数据包的16进制部分解码。&lt;br&gt;&lt;img src=&quot;/uploads/4/4-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　本次检测就到此为止，没有发现可疑后门，总算是心里松了口气。在这里也祝愿各位同道的菜刀也没有后门哈。&lt;br&gt;　　PS：如对本次检测有任何疑问，欢迎留言评论指正！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　前几天爆起的菜刀后门事件可谓在安全界里面掀起龙卷风，三百万Webshell就这么成了别人的嫁衣，吾心甚恐。
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>3.一次诈骗电话事件引发的对母校学生信息安全的深思</title>
    <link href="http://yoursite.com/%E4%B8%80%E6%AC%A1%E8%AF%88%E9%AA%97%E7%94%B5%E8%AF%9D%E4%BA%8B%E4%BB%B6%E5%BC%95%E5%8F%91%E7%9A%84%E5%AF%B9%E6%AF%8D%E6%A0%A1%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%9A%84%E6%B7%B1%E6%80%9D/"/>
    <id>http://yoursite.com/一次诈骗电话事件引发的对母校学生信息安全的深思/</id>
    <published>2016-03-15T09:36:00.000Z</published>
    <updated>2016-04-20T09:53:40.034Z</updated>
    
    <content type="html">&lt;p&gt;　　考虑了好久，还是整理写了这篇文章哈！谨以此文告诫在校生加强自我安全意识，同时提醒校方加强学生信息安全的管理力度，以及对校园网络安全的重视。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;　　年前的时候，临近放假，据说学校不少师生接到诈骗电话，而且大多是年级较低的同学，算是比较有针对性的诈骗了。&lt;br&gt;　　由于实习工作的性质，如今对信息安全都比较敏感，当时就想了，貌似每年都有这情况，而且不止母校的样子。&lt;br&gt;　　那么，学校网络被人捅了？师生信息泄露？于是就想着如何模拟陌生人对母校进行渗透，窃取师生信息。&lt;br&gt;　　下面开始模拟渗透过程：&lt;br&gt;　　首先，百度母校官网，直接访问&lt;br&gt;&lt;img src=&quot;/uploads/3/3-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　嗯，简单查看各个功能，子站，右上角可以发现有个学生系统入口，这个一看就是有学生数据的系统，直接访问看看能外网访问不&lt;br&gt;&lt;img src=&quot;/uploads/3/3-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　啧啧啧，看到的第一眼就是，没有验证码，可以考虑爆破，不过不知道数据传输有没有加密，密码错误次数什么的有没有限制。&lt;br&gt;　　经过测试，啧啧啧，数据明文，错误次数无限制，同IP高并发访问也没有限制，可以直接暴力破解个天昏地暗啊！&lt;br&gt;　　这里直接测试弱口令！不过在此之前，我们要搞到学号组成&lt;br&gt;　　什么地方能够提供这些基础信息？古代客栈是信息集中地，可以收集各种信息，那么在现在的网络社会呢？当然是各种社交网站，论坛等等，当然也可以直接通过Google关键字搜索技术进行搜集，这里我通过BBS搜集。&lt;br&gt;　　现在基本高校都有自己的BBS，百度一搜学校名+BBS，母校的BBS就出来了，我们直接进入进行吧内搜索，关键字学号。（也可以直接查看那些新生贴进行搜集）&lt;br&gt;&lt;img src=&quot;/uploads/3/3-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　啧啧啧，学号什么的就有例子了，搜集多个学号进行比对，然后猜测一下组成。&lt;br&gt;　　直接假设后三位或四位是编号之类的，那么我们对后四位进行遍历，来测试弱口令看看效果如何。&lt;br&gt;　　回到myscse登录界面，启动我们的burpsuite神器进行抓包，暴力破解，测试弱口令123456&lt;br&gt;　　不一会，效果出来了，数据包长度325的就是正确的&lt;br&gt;&lt;img src=&quot;/uploads/3/3-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　现在利用得到的任一弱口令账号登录进去看看，嗯，有个信息管理系统，那就是还要进去咯，毕竟我们的目标是师生信息！&lt;br&gt;&lt;img src=&quot;/uploads/3/3-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　同样需要学号密码登录，一般的第一反应都是会测试刚刚的账号密码是否可行，结果可想而知。&lt;br&gt;　　然后就可以查看各种个人信息了，啧啧啧！&lt;br&gt;&lt;img src=&quot;/uploads/3/3-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　不过没有联系电话住址呀这些更敏感的信息呀，看来要试试有没接口暴露信息或者注入了。（这里暂不考虑拿shell）&lt;br&gt;　　经测试，全校课程信息处有个注入点！这个注入点也是让我有点醉，只是做了简单的前端验证用户输入，可惜然并卵。&lt;br&gt;　　直接burpsuite抓包绕过前端验证，数据包扔sqlmap里开跑，等一会就有直接结果了,直接查学生表&lt;br&gt;&lt;img src=&quot;/uploads/3/3-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　啧啧啧，40000+学生档案数据，其他表还包括大量其他敏感数据，包括成绩，考试信息，毕业生工作信息等等，想怎么查就怎么查，脱裤就有点慢，不过可以自己写个针对性强些脚本来脱裤，优化一下哈，这里仅检测，就不深入了。&lt;br&gt;　　总结：&lt;br&gt;　　1、高校学生网络安全意识过于薄弱&lt;br&gt;　　2、校方对于校园网络安全管理力度不足，不够重视&lt;br&gt;　　3、校方对于学生网络安全意识的教育不足&lt;br&gt;PS：校方老师，领导如有修复问题，可联系本人咨询！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　考虑了好久，还是整理写了这篇文章哈！谨以此文告诫在校生加强自我安全意识，同时提醒校方加强学生信息安全的管理力度，以及对校园网络安全的重视。&lt;br&gt;
    
    </summary>
    
      <category term="渗透事件" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>2.Hexo配置与使用</title>
    <link href="http://yoursite.com/Hexo%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/Hexo配置与使用/</id>
    <published>2016-03-07T06:18:59.000Z</published>
    <updated>2016-04-20T02:57:24.351Z</updated>
    
    <content type="html">&lt;p&gt;　　本文主要介绍Hexo的一些基本站点配置，主题的选择和使用，以及文章的撰写发表！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;域名绑定&quot;&gt;&lt;a href=&quot;#域名绑定&quot; class=&quot;headerlink&quot; title=&quot;域名绑定&quot;&gt;&lt;/a&gt;域名绑定&lt;/h2&gt;&lt;p&gt;　　首先我们的博客域名angoddess.github.io是访问正常的，但是我们可能觉得这个域名太丑了，简直弱爆了。我们想如果有人访问angoddess.github.io时指向别的域名，但还是正常访问我们的博客，这就是我们常说的重定向，操作很简单，首先我们要申请个自己的域名。&lt;br&gt;　　我是在阿里云申请的域名：www.angoddess.cn，地址是：&lt;a href=&quot;http://wanwang.aliyun.com/domain/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wanwang.aliyun.com/domain/&lt;/a&gt;&lt;br&gt;　　申请好域名之后，我们要配置让这个域名能够解析到我们的GitHub博客的地址，也就是访问www.angoddess.cn会访问到我们的博客内容。&lt;br&gt;　　我们来到阿里云的管理控制台，域名，找到我们的域名，选择解析&lt;br&gt;&lt;img src=&quot;/uploads/2/2-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　我们添加一条CNAME记录，把域名解析到我们博客的位置，如图：&lt;br&gt;&lt;img src=&quot;/uploads/2/2-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　启用后，我们访问www.angoddess.cn就可以访问到我们的博客了&lt;br&gt;　　PS：可能启用后，马上访问还是没效果，不要急，等待几分钟，或者直接清理浏览器的缓存再访问试试。&lt;br&gt;　　如果想访问angoddess.cn也访问到我们的博客，那么就再添加一条CNAME记录，主机记录那里改为@，其它不变就可以了。&lt;br&gt;　　但是，我们会发现我们访问angoddess.github.io域名时，域名依然没有变。因为我们只是让www.angoddess.cn有内容了而已，还没有让博客域名重定向到这个域名。&lt;br&gt;　　别急，接下来我们就来重定向博客域名，步骤很简单，一步解决。&lt;br&gt;　　我们只需要在Hexo下的source目录中，添加一个文件名为CNAME的文件，然后内容就是你的域名即可，如图：&lt;br&gt;&lt;img src=&quot;/uploads/2/2-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　最后更新代码到你的GitHub上。&lt;br&gt;　　这时我们访问原来的博客地址就会重定向到我们在阿里云申请的域名啦，而且访问正常！是不是很酷！&lt;br&gt;　　PS：如果没有马上生效，记得不要急，等几分钟或清理缓存。&lt;/p&gt;
&lt;h2 id=&quot;主题使用与配置&quot;&gt;&lt;a href=&quot;#主题使用与配置&quot; class=&quot;headerlink&quot; title=&quot;主题使用与配置&quot;&gt;&lt;/a&gt;主题使用与配置&lt;/h2&gt;&lt;p&gt;Hexo的默认主题是landscape，其实也还蛮不错的啦，如果不喜欢，我们在GitHub上可以找到很多其他的主题，这里介绍一款较受欢迎的主题next，GitHub地址：&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/iissnan/hexo-theme-next&lt;/a&gt;&lt;br&gt;可以在GitHub上面直接下载zip文件，然后解压到我们自己的Hexo根目录下的themes下（themes就是存放我们的主题的文件夹，主题名就是文件夹名），命名为next。&lt;br&gt;当然我们可以直接用git克隆。进入到我们的Hexo目录下的themes文件夹中，调用git，执行克隆命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$git clone https://github.com/iissnan/hexo-theme-next next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行完命令，我们就可以看到themes目录下多了next主题文件夹了。&lt;br&gt;安装主题就更加简单了，我们只需要在Hexo根目录下的_config.yml中，更改theme的值为我们想要的主题的目录名称即可，如图：&lt;br&gt;&lt;img src=&quot;/uploads/2/2-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;之后，我们启动本地服务测试，查看效果&lt;br&gt;在Hexo根目录启动git Bash（git shell）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/2/2-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　安装完主题，我们发现其实并没有达到我们想要的界面效果或功能，别急，我们还要对主题进行配置。&lt;br&gt;　　NexT主题有很多配置项，包括导航菜单，个人头像，文章评论功能等等，官方有非常详细的介绍，这里就不一一叙述了。&lt;br&gt;　　&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://theme-next.iissnan.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文章的撰写&quot;&gt;&lt;a href=&quot;#文章的撰写&quot; class=&quot;headerlink&quot; title=&quot;文章的撰写&quot;&gt;&lt;/a&gt;文章的撰写&lt;/h2&gt;&lt;p&gt;　　首先我们要创建文章页面&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$hexo new &amp;quot;这里是文章标题&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　然后在根目录下source目录中的_posts目录下，就可以看到我们创建的文章页面，后缀是.md，点开就可以开始编写文章了。&lt;br&gt;　　可以给文章设置标题，标签，题目等信息。&lt;br&gt;如果多标签，格式如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tags: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- Hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- Blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- NexT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　Hexo是通过Markdown语言写文章的，就是在我们平时写代码的编辑器里去写。。。&lt;br&gt;　　这逼装得是那个牛啊，不过就是对于用惯了富文本编辑器写文章的人来说，可能有点麻烦&lt;br&gt;　　Markdown语法其实也相对比较简单，很容易上手。&lt;br&gt;　　可以参考&lt;a href=&quot;http://sspai.com/25137&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sspai.com/25137&lt;/a&gt;&lt;br&gt;　　网上有一些Markdown编辑器可以辅助编辑文章，如：&lt;br&gt;　　&lt;a href=&quot;http://mahua.jser.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mahua.jser.me/&lt;/a&gt;&lt;br&gt;　　还是很不错的，这里附上一张我的文章编辑界面哈，用的是Sublime Text 3，对这个代码编辑器情有独钟。&lt;br&gt;&lt;img src=&quot;/uploads/2/2-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　至于文章的发表，这个上一章已经说过了，这里就不重复了哈！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文主要介绍Hexo的一些基本站点配置，主题的选择和使用，以及文章的撰写发表！&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>1.Build Your Blog By Github</title>
    <link href="http://yoursite.com/Build-Your-Blog-By-Github/"/>
    <id>http://yoursite.com/Build-Your-Blog-By-Github/</id>
    <published>2016-03-01T02:52:39.000Z</published>
    <updated>2016-04-20T02:34:56.369Z</updated>
    
    <content type="html">&lt;p&gt;Here I will teach you how to bulid your personal blog by github.&lt;br&gt;Tools: git | github | hexo&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;code&gt;My System:window 7 64bit&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Frist-Register-your-github-user&quot;&gt;&lt;a href=&quot;#Frist-Register-your-github-user&quot; class=&quot;headerlink&quot; title=&quot;Frist: Register your github user.&quot;&gt;&lt;/a&gt;Frist: Register your github user.&lt;/h2&gt;&lt;p&gt;Input your email and password,then follow the tips to do.Just so easy!&lt;br&gt;&lt;img src=&quot;/uploads/1/1-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Second-Build-a-new-repository-for-your-blog&quot;&gt;&lt;a href=&quot;#Second-Build-a-new-repository-for-your-blog&quot; class=&quot;headerlink&quot; title=&quot;Second: Build a new repository for your blog.&quot;&gt;&lt;/a&gt;Second: Build a new repository for your blog.&lt;/h2&gt;&lt;p&gt;Login your github and build a new repository on the right top.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Input the information about of your blog.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;then,click the button “Create repository” to create your repository.&lt;br&gt;Now,select the Setting tab and click the button “Launch automatic page generator” to design your blog page.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Here you can design your blog index page.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Select the style you love for your blog page.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Finally,pulish your page to finish your blog page.&lt;br&gt;Now,you already have a blog by yourself.&lt;br&gt;You can visit by &lt;a href=&quot;http://username.github.io(e.g.http://angoddess.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://username.github.io(e.g.http://angoddess.github.io&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;Third-Install-the-git-and-connect-to-your-github&quot;&gt;&lt;a href=&quot;#Third-Install-the-git-and-connect-to-your-github&quot; class=&quot;headerlink&quot; title=&quot;Third: Install the git and connect to your github.&quot;&gt;&lt;/a&gt;Third: Install the git and connect to your github.&lt;/h2&gt;&lt;p&gt;Install the git is too easy so I will not teach it. Git Download&lt;br&gt;Now we make the git to connect your github by ssh.&lt;br&gt;Open your git bash(git shell).&lt;br&gt;Set your username and email:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$git config --global user.name &amp;quot;angoddess&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$git config --global user.email &amp;quot;447375410@qq.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Tip:This name and email will use when your update your blog code into github.&lt;br&gt;You can check your set.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$git config --lis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now begin to create your ssh key.&lt;br&gt;Check the folder “.ssh” exists.&lt;br&gt;windows addr: C:\Users\angoddess.ssh&lt;br&gt;linux addr: ~/.ssh&lt;br&gt;Delete this folder and create your key.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ssh-keygen -t rsa -C &amp;quot;447375410@qq.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Follow the tip to enter, you will get two file “id_rsa” and “id_rsa.pub”.&lt;br&gt;Now open the id_rsa.pub to copy the ssh key and put it on your github.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Write your key title and key value to add.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Finally, you can test it.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ssh git@github.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/1/1-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Fourth-Install-the-hexo-and-get-all-file-to-your-workspace&quot;&gt;&lt;a href=&quot;#Fourth-Install-the-hexo-and-get-all-file-to-your-workspace&quot; class=&quot;headerlink&quot; title=&quot;Fourth: Install the hexo and get all file to your workspace.&quot;&gt;&lt;/a&gt;Fourth: Install the hexo and get all file to your workspace.&lt;/h2&gt;&lt;p&gt;Install hexo must to install node. Node Download&lt;br&gt;Open git shell.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$npm install -g hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Create your workspace’s folder and get hexo.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$cd /d/git/github&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mkdir angoddess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$hexo init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/1/1-10.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Finally-Test-the-blog-on-localhost-and-update-it-into-github&quot;&gt;&lt;a href=&quot;#Finally-Test-the-blog-on-localhost-and-update-it-into-github&quot; class=&quot;headerlink&quot; title=&quot;Finally: Test the blog on localhost and update it into github.&quot;&gt;&lt;/a&gt;Finally: Test the blog on localhost and update it into github.&lt;/h2&gt;&lt;p&gt;Generate static pages.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Test the blog on localhost.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/1/1-11.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Update it into github must be set deploy.&lt;br&gt;Open file “_config.yml”.&lt;br&gt;Addr: D:\git\github\Hexo_config.yml&lt;br&gt;Rewrite the deploy like this.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repository: https://github.com/Angoddess/angoddess.github.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here you will input your username and email.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/1/1-12.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here I will teach you how to bulid your personal blog by github.&lt;br&gt;Tools: git | github | hexo&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
</feed>
